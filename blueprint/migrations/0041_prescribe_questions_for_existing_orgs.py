# Generated by Django 3.2.14 on 2022-07-27 17:33

from django.db import migrations

QUESTIONNAIRE_NAME = (
    '*Kickstart Questionnaire* â€“ Click here to get started '
    'with security questionnaires in Laika!'
)

EXCLUDE_QUESTIONNAIRE_QUESTION_COUNT = 50


def prescribe_existing_orgs(apps, schema_editor):
    question_blueprint_model = apps.get_model('blueprint', 'QuestionBlueprint')
    questionnaire_model = apps.get_model('library', 'Questionnaire')
    question_model = apps.get_model('library', 'Question')
    library_entry_model = apps.get_model('library', 'LibraryEntry')
    organization_model = apps.get_model('organization', 'Organization')
    for org in organization_model.objects.all().iterator():
        questions_per_org_count = question_model.objects.filter(
            library_entry__organization=org
        ).count()
        if questions_per_org_count > EXCLUDE_QUESTIONNAIRE_QUESTION_COUNT:
            continue
        questionnaire = questionnaire_model.objects.create(
            name=QUESTIONNAIRE_NAME, organization=org
        )
        for question in question_blueprint_model.objects.all().order_by('id'):
            library_entry = library_entry_model.objects.create(
                organization=org,
                answer_text=question.answer,
                short_answer_text=question.short_answer,
            )
            new_question = question_model.objects.create(
                library_entry=library_entry,
                text=question.question_text,
                metadata={
                    "sheet": {"name": "Sheet1", "position": 0},
                    "answer": {"address": "Sheet1!B1", "options": []},
                    "shortAnswer": {
                        "address": "Sheet1!C1",
                        "options": ["Yes", "No", "N/A"],
                    },
                    "questionAddress": "Sheet1!C3",
                },
                default=True,
            )
            questionnaire.questions.add(new_question)


def revert_prescribe_existing_orgs(apps, schema_editor):
    questionnaire_model = apps.get_model('library', 'Questionnaire')
    library_entry_model = apps.get_model('library', 'LibraryEntry')
    question_model = apps.get_model('library', 'Question')
    library_entry_model.objects.filter(
        question__questionnaires__name=QUESTIONNAIRE_NAME
    ).delete()
    question_model.objects.filter(questionnaires__name=QUESTIONNAIRE_NAME).delete()
    questionnaire_model.objects.filter(name=QUESTIONNAIRE_NAME).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('blueprint', '0040_controlblueprint_framework_tag'),
        ('library', '0029_alter_libraryentry_updated_at'),
    ]

    operations = [
        migrations.RunPython(
            prescribe_existing_orgs, reverse_code=revert_prescribe_existing_orgs
        ),
    ]

# Generated by Django 3.2.15 on 2022-12-19 20:43

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ('dashboard', '0029_create_task_view'),
    ]

    operations = [
        migrations.RunSQL(
            '''
                DROP VIEW IF exists dashboard_view;
                CREATE OR REPLACE VIEW dashboard_view AS
                SELECT ROW_NUMBER() OVER() as id, * FROM (
                    SELECT
                        pt.id as model_id,
                        oo.id AS organization_id,
                        '' as reference_id,
                        '' as reference_name,
                        false as is_recurrent,
                        false as is_required,
                        cast(ps.id AS text) AS unique_action_item_id,
                        ps.created_at,
                        ps.updated_at,
                        ps.assignee_id,
                        null::timestamp as start_date,
                        ps.due_date,
                        ps.completed_on,
                        ps.status,
                        'playbook_task' AS TYPE,
                        concat(initcap(ps.group), ' subtask due in ', pt.name)
                        AS description,
                        concat('playbooks/', pp.id, '/', pt.id)
                        AS reference_url,
                        ps.sort_index,
                        ps.group
                    FROM program_subtask ps
                    left join public.program_task pt
                    ON pt.id = ps.task_id
                    left join public.program_program pp
                    ON pp.id = pt.program_id
                    left join public.organization_organization oo
                    ON oo.id = pp.organization_id
                    UNION
                    SELECT
                        du.id as model_id,
                        du.organization_id,
                        '' as reference_id,
                        '' as reference_name,
                        false as is_recurrent,
                        false as is_required,
                        '' as unique_action_item_id,
                        du.created_at,
                        du.updated_at,
                        du.assignee_id,
                        null::timestamp as start_date,
                        du.due_date,
                        du.completed_on,
                        du.status,
                        dt.task_type AS TYPE,
                        du.description,
                        du.reference_url,
                        0 as sort_index,
                        '' as group
                    FROM dashboard_usertask du
                    INNER JOIN dashboard_task dt on du.task_id = dt.id
                    UNION
                    SELECT
                        uu.organization_id as model_id,
                        uu.organization_id,
                        '' as reference_id,
                        '' as reference_name,
                        false as is_recurrent,
                        false as is_required,
                        cast(aia.id as text) as unique_action_item_id,
                        NULL as created_at,
                        NULL as updated_at,
                        aiaa.user_id as assignee_id,
                        aia.start_date as start_date,
                        aia.due_date,
                        aia.completion_date as completed_on,
                        aia.status,
                        aia.metadata->>'type' as type,
                        aia.description,
                        aia.metadata->>'type' as reference_url,
                        0 as sort_index,
                        '' as group
                    from action_item_actionitem aia
                    INNER JOIN action_item_actionitem_assignees as aiaa
                    ON aia.id = aiaa.actionitem_id
                    INNER JOIN user_user uu ON uu.id = aiaa.user_id
                    WHERE aia.metadata @> '{"type": "quick_start"}'
                    OR aia.metadata @> '{"type": "access_review"}'
                    OR aia.metadata @> '{"type": "policy"}'
                    ) results;
                CREATE RULE update_dashboard_view AS ON UPDATE TO
                dashboard_view DO INSTEAD NOTHING;
                CREATE RULE delete_dashboard_view AS ON DELETE TO
                dashboard_view DO INSTEAD NOTHING;
                ''',
            reverse_sql='',
        ),
    ]

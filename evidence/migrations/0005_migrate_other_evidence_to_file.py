# Generated by Django 3.0.7 on 2020-07-12 17:58
import io
import logging
import re

from django.core.files import File
from django.db import migrations, transaction

from laika.aws.s3 import s3_client
from laika.utils.regex import FILE_NAME_EXTENSION

logger = logging.getLogger('migrate_other_evidence')


def create_file_evidence(
    apps, organization, upload_file, file_type='FILE', file_description=''
):
    Evidence = apps.get_model('evidence', 'Evidence')
    new_evidence = Evidence.objects.create(
        organization=organization,
        name=upload_file.name,
        description=file_description,
        type=file_type,
        file=None,
    )
    new_evidence.save()
    new_evidence.file = upload_file
    new_evidence.save()
    return new_evidence


def exists_reference_evidence(
    reference_model, evidence_file_name, evidence_type, filters
):
    return reference_model.objects.filter(
        **filters, evidence__name=evidence_file_name, evidence__type=evidence_type
    ).exists()


def increment_file_name(reference_model, evidence_file, evidence_type, filters):
    file_counter = 1
    file_ext = re.search(FILE_NAME_EXTENSION, evidence_file.name).group(0)
    file_name_without_ext = re.sub(FILE_NAME_EXTENSION, '', evidence_file.name)
    while True:
        file_name = f'{file_name_without_ext}({file_counter}){file_ext}'
        file_counter += 1
        if not exists_reference_evidence(
            reference_model, file_name, evidence_type, filters
        ):
            break
    evidence_file.name = file_name
    return evidence_file


def get_dataroom_evidence_references(apps, other_evidence, organization):
    DataroomEvidence = apps.get_model('dataroom', 'DataroomEvidence')

    return [
        dataroom_evidence
        for dataroom_evidence in DataroomEvidence.objects.filter(
            evidence__id=other_evidence.id, dataroom__organization=organization
        )
    ]


def get_org_vendor_evidence_references(apps, other_evidence, organization):
    OrganizationVendorEvidence = apps.get_model('vendor', 'OrganizationVendorEvidence')

    return [
        org_vendor_evidence
        for org_vendor_evidence in OrganizationVendorEvidence.objects.filter(
            evidence__id=other_evidence.id,
            organization_vendor__organization=organization,
        )
    ]


def get_task_evidence_references(apps, other_evidence, organization):
    LegacyTaskEvidence = apps.get_model('program', 'LegacyTaskEvidence')

    return [
        task_evidence
        for task_evidence in LegacyTaskEvidence.objects.filter(
            evidence__id=other_evidence.id, task__organization=organization
        )
    ]


def create_dataroom_evidence(
    apps, organization, dataroom, evidence_file, evidence_type
):
    DataroomEvidence = apps.get_model('dataroom', 'DataroomEvidence')
    filters = {'dataroom': dataroom}
    if exists_reference_evidence(
        DataroomEvidence, evidence_file.name, evidence_type, filters
    ):
        evidence_file = increment_file_name(
            DataroomEvidence, evidence_file, evidence_type, filters
        )
    evidence = create_file_evidence(apps, organization, evidence_file)
    dataroom.evidence.add(evidence)


def add_dataroom_other_evidence(apps, response_file, organization, dataroom, file_name):
    copy_file = File(name=file_name, file=io.BytesIO(response_file))
    create_dataroom_evidence(apps, organization, dataroom, copy_file, 'FILE')


def create_vendor_evidence(
    apps, organization, organization_vendor, evidence_file, evidence_type
):
    OrganizationVendorEvidence = apps.get_model('vendor', 'OrganizationVendorEvidence')
    filters = {'organization_vendor': organization_vendor}
    if exists_reference_evidence(
        OrganizationVendorEvidence, evidence_file.name, evidence_type, filters
    ):
        evidence_file = increment_file_name(
            OrganizationVendorEvidence, evidence_file, evidence_type, filters
        )
    evidence = create_file_evidence(apps, organization, evidence_file)
    organization_vendor.documents.add(evidence)


def add_vendor_other_evidence(
    apps, organization, response_file, organization_vendor, file_name
):
    copy_file = File(name=file_name, file=io.BytesIO(response_file))
    create_vendor_evidence(apps, organization, organization_vendor, copy_file, 'FILE')


def create_task_evidence(
    apps, organization, task, evidence_file, evidence_type, description=''
):
    LegacyTaskEvidence = apps.get_model('program', 'LegacyTaskEvidence')
    try:
        filters = {'task_id': task}
        if exists_reference_evidence(
            LegacyTaskEvidence, evidence_file.name, evidence_type, filters
        ):
            evidence_file = increment_file_name(
                LegacyTaskEvidence, evidence_file, evidence_type, filters
            )

        evidence = create_file_evidence(
            apps, organization, evidence_file, evidence_type, description
        )
        task.evidence.add(evidence)

        return evidence
    except Exception as e:
        logger.error(
            f'Error storing task file: {evidence_file.name} for organization:'
            f'{organization.id}. Error: {e}'
        )
        return


def add_task_other_evidence(apps, organization, task, response_file, file_name):
    copy_file = File(name=file_name, file=io.BytesIO(response_file))
    create_task_evidence(apps, organization, task, copy_file, 'FILE')


def migrate_existing_other_evidence_to_copy_file(apps, groups):
    Organization = apps.get_model('organization', 'Organization')
    Evidence = apps.get_model('evidence', 'Evidence')
    Dataroom = apps.get_model('dataroom', 'Dataroom')
    OrganizationVendor = apps.get_model('vendor', 'OrganizationVendor')
    LegacyTask = apps.get_model('program', 'LegacyTask')

    for org in Organization.objects.all():
        with transaction.atomic():
            organization = Organization.objects.get(id=org.id)
            logger.info(f'Started with organization: {organization}')
            for oe in Evidence.objects.filter(
                organization=organization, type='OTHER'
            ).order_by('name', 'created_at'):
                logger.info(f'Started the migration of the Other evidence {oe} to file')
                dt_references = get_dataroom_evidence_references(apps, oe, organization)
                ov_references = get_org_vendor_evidence_references(
                    apps, oe, organization
                )
                lt_references = get_task_evidence_references(apps, oe, organization)

                bucket_name = oe.file.storage.bucket_name
                key = f'media/private/{oe.other_evidence}'

                s3_response_object = s3_client.get_object(Bucket=bucket_name, Key=key)
                response_file = s3_response_object['Body'].read()

                for dt_reference in dt_references:
                    dataroom = Dataroom.objects.get(
                        id=dt_reference.dataroom.id, organization=organization
                    )
                    dt_reference.delete()
                    add_dataroom_other_evidence(
                        apps, response_file, organization, dataroom, oe.name
                    )

                for ov_reference in ov_references:
                    org_vendor = OrganizationVendor.objects.get(
                        id=ov_reference.organization_vendor.id,
                        organization=organization,
                    )
                    ov_reference.delete()
                    add_vendor_other_evidence(
                        apps, organization, response_file, org_vendor, oe.name
                    )

                for lt_reference in lt_references:
                    task = LegacyTask.objects.get(
                        id=lt_reference.task.id, organization=organization
                    )
                    lt_reference.delete()
                    add_task_other_evidence(
                        apps, organization, task, response_file, oe.name
                    )

                logger.info(
                    f'Finished the migration of the Other evidence {oe} to file'
                )
                Evidence.objects.filter(
                    organization=organization, type='OTHER'
                ).delete()
            logger.info(f'Finished with organization: {organization}')


class Migration(migrations.Migration):
    dependencies = [
        ('evidence', '0004_rename_evidence_permission'),
        ('dataroom', '0003_update_laika_papers_to_pdf'),
        ('vendor', '0007_increase_financial_exposure_precision'),
        ('program', '0007_remove_certification_fks'),
    ]

    operations = [migrations.RunPython(migrate_existing_other_evidence_to_copy_file)]

# Generated by Django 3.1.6 on 2021-05-17 14:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

AUDITOR = 'user.auditor'
EVIDENCE = 'fieldwork.evidence'


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('user', '0040_add_concierge_user'),
        ('certification', '0007_update_regex_field'),
        ('evidence', '0024_update_language_related_name'),
        ('audit', '0015_add_alerts_perms_to_groups'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Criteria',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('display_id', models.CharField(max_length=50)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CriteriaRequirement',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'criteria',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='criteria_requirement',
                        to='fieldwork.criteria',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Evidence',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('display_id', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('instructions', models.TextField()),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('open', 'Open'),
                            ('submitted', 'Submitted'),
                            ('auditor_accepted', 'Auditor Accepted'),
                        ],
                        default='open',
                        max_length=50,
                    ),
                ),
                ('read', models.BooleanField(default=False)),
                (
                    'assignee',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='assignee_ev',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'audit',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='evidence',
                        to='audit.audit',
                    ),
                ),
                (
                    'reviewer',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='reviewer_ev',
                        to=AUDITOR,
                    ),
                ),
                (
                    'tester',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='tester_ev',
                        to=AUDITOR,
                    ),
                ),
            ],
            options={
                'unique_together': {('display_id', 'audit')},
            },
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('display_id', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('open', 'Open'),
                            ('under_review', 'Under Review'),
                            ('completed', 'Completed'),
                        ],
                        default='open',
                        max_length=50,
                    ),
                ),
                (
                    'result',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('exception_noted', 'Exception Noted'),
                            ('no_exception_noted', 'No Exception Noted'),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'result_exception_note',
                    models.TextField(blank=True, null=True, default=''),
                ),
                ('result_comment', models.TextField(blank=True, null=True, default='')),
                (
                    'audit',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='requirements',
                        to='audit.audit',
                    ),
                ),
                (
                    'criteria',
                    models.ManyToManyField(
                        related_name='requirements',
                        through='fieldwork.CriteriaRequirement',
                        to='fieldwork.Criteria',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='RequirementEvidence',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'evidence',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='requirement_ev',
                        to=EVIDENCE,
                    ),
                ),
                (
                    'requirement',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='fieldwork.requirement',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='requirement',
            name='evidence',
            field=models.ManyToManyField(
                related_name='requirements',
                through='fieldwork.RequirementEvidence',
                to=EVIDENCE,
            ),
        ),
        migrations.AddField(
            model_name='requirement',
            name='reviewer',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='reviewer_requirements',
                to=AUDITOR,
            ),
        ),
        migrations.AddField(
            model_name='requirement',
            name='tester',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='tester_requirements',
                to=AUDITOR,
            ),
        ),
        migrations.CreateModel(
            name='FetchLogic',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(max_length=50)),
                ('logic', models.JSONField()),
                (
                    'evidence',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='fetch_logic',
                        to=EVIDENCE,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='EvidenceAttachment',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'attachment',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='attached_ev',
                        to='evidence.evidence',
                    ),
                ),
                (
                    'evidence',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='ev_attachment',
                        to=EVIDENCE,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='criteriarequirement',
            name='requirement',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='fieldwork.requirement'
            ),
        ),
        migrations.CreateModel(
            name='CriteriaAuditType',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'criteria',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='criteria_types',
                        to='fieldwork.criteria',
                    ),
                ),
                (
                    'type',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='certification.certificationsection',
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='requirement',
            unique_together={('display_id', 'audit')},
        ),
    ]

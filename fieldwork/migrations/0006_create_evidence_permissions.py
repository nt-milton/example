# Generated by Django 3.1.6 on 2021-05-28 19:46

from django.db import migrations


def create_permission(apps, model, codename, name):
    content_type = apps.get_model('contenttypes', 'ContentType')
    permission = apps.get_model('auth', 'Permission')
    obj_content_type = content_type.objects.get_for_model(model)
    content_type = content_type.objects.get(
        app_label=obj_content_type.app_label, model=obj_content_type.model
    )
    permission.objects.get_or_create(
        codename=codename, name=name, content_type=content_type
    )


permissions = [
    ('fetch_evidence_attachment', 'Can fetch evidence attachments'),
    ('view_evidence_attachment', 'Can view evidence attachments'),
    ('add_evidence_attachment', 'Can add evidence attachments'),
    ('delete_evidence_attachment', 'Can delete evidence attachments'),
    ('review_evidence', 'Can review evidence'),
    ('bulk_review_evidence', 'Can bulk review evidence'),
    ('assign_evidence', 'Can assign evidence'),
]


def create_evidence_permissions(apps, schema_editor):
    fieldwork_evidence = apps.get_model('fieldwork', 'Evidence')

    for p in permissions:
        create_permission(apps, fieldwork_evidence, p[0], p[1])


class Migration(migrations.Migration):
    dependencies = [
        ('fieldwork', '0005_evidence_is_laika_reviewed'),
    ]

    operations = [
        migrations.RunPython(create_evidence_permissions),
        migrations.RunSQL(
            '''
            BEGIN;
            INSERT into
               public.auth_group_permissions (group_id, permission_id) (
               SELECT
                  g.id AS group_id, p.id AS permission_id 
               FROM
                  public.auth_group g 
                  cross join
                     public.auth_permission p 
                  join django_content_type ct on ct.id = p.content_type_id 
               WHERE
                  (
                     g.name = 'auditor_admin' or
                     g.name = 'auditor'
                  )
                  AND p.codename = ANY (array [
                    'add_evidence',
                    'view_evidence',
                    'delete_evidence',
                    'change_evidence',
                    'assign_evidence',
                    'add_evidence_attachment',
                    'view_evidence_attachment'
                    ]
                    )
                    AND ct.app_label = 'fieldwork' and ct.model ='evidence'
                )
            ON CONFLICT DO NOTHING;
            COMMIT;
        '''
        ),
        migrations.RunSQL(
            '''
             BEGIN;
            INSERT into
               public.auth_group_permissions (group_id, permission_id) (
               SELECT
                  g.id AS group_id, p.id AS permission_id 
               FROM
                  public.auth_group g 
                  cross join
                     public.auth_permission p 
                  join django_content_type ct on ct.id = p.content_type_id 
               WHERE
                  (
                     g.name != 'auditor_admin' and
                     (g.name ilike '%_admin' or g.name ilike '%_super')
                  )
                  AND p.codename = ANY (array [
                    'view_evidence',
                    'change_evidence',
                    'fetch_evidence_attachment',
                    'view_evidence_attachment',
                    'assign_evidence',
                    'add_evidence_attachment',
                    'delete_evidence_attachment',
                    'review_evidence'
                    ]
                    )
                    AND ct.app_label = 'fieldwork' and ct.model ='evidence'
                )
            ON CONFLICT DO NOTHING;
            COMMIT;
        '''
        ),
        migrations.RunSQL(
            '''
                BEGIN;
               INSERT into
                  public.auth_group_permissions (group_id, permission_id) (
                  SELECT
                     g.id AS group_id, p.id AS permission_id 
                  FROM
                     public.auth_group g 
                     cross join
                        public.auth_permission p 
                     join django_content_type ct on ct.id = p.content_type_id 
                  WHERE
                     (
                        g.name ilike '%_super'
                     )
                     AND p.codename = ANY (array [
                       'bulk_review_evidence'
                       ]
                       )
                       AND ct.app_label = 'fieldwork' and ct.model ='evidence'
                   )
               ON CONFLICT DO NOTHING;
               COMMIT;
           '''
        ),
    ]

# Generated by Django 3.1.12 on 2021-11-16 20:10
import logging

import django.db.models.deletion
import tinymce.models
from django.db import migrations, models

from integration import error_codes

logger = logging.getLogger(__name__)


ERROR_VALUES = [
    (error_codes.NONE, 'NONE', 'None'),
    (error_codes.OTHER, 'OTHER', 'Other'),
    (
        error_codes.INSUFFICIENT_PERMISSIONS,
        'INSUFFICIENT_PERMISSIONS',
        'Insufficient Permissions',
    ),
    (
        error_codes.MISSING_GITHUB_ORGANIZATION,
        'MISSING_GITHUB_ORGANIZATION',
        'Missing Github Organization',
    ),
    (error_codes.DENIAL_OF_CONSENT, 'DENIAL_OF_CONSENT', 'Denial Of Consent'),
    (
        error_codes.INSUFFICIENT_CONFIG_DATA,
        'INSUFFICIENT_CONFIG_DATA',
        'Insufficient Config Data',
    ),
    (
        error_codes.BAD_CLIENT_CREDENTIALS,
        'BAD_CLIENT_CREDENTIALS',
        'Invalid Client Credentials',
    ),
    (error_codes.EXPIRED_TOKEN, 'EXPIRED_TOKEN', 'Expired Token'),
    (
        error_codes.PROVIDER_SERVER_ERROR,
        'PROVIDER_SERVER_ERROR',
        'Provider Server Error',
    ),
    (error_codes.RESOURCE_NOT_FOUND, 'RESOURCE_NOT_FOUND', 'Resource not found'),
    (
        error_codes.API_LIMIT,
        'API_LIMIT',
        'API call exceeded rate limit due to too many requests',
    ),
    (
        error_codes.MISSING_GITHUB_APP_INSTALLATION,
        'MISSING_GITHUB_APP_INSTALLATION',
        'Github App is not installed on the organization',
    ),
    (
        error_codes.PROVIDER_GRAPHQL_ERROR,
        'PROVIDER_GRAPHQL_ERROR',
        'Provider Graphql API Error',
    ),
    (error_codes.CONNECTION_TIMEOUT, 'CONNECTION_TIMEOUT', 'Connection Time Out'),
    (
        error_codes.DEFAULT_GRAPHQL_ERROR,
        'DEFAULT_GRAPHQL_ERROR',
        'Default GraphQL Error',
    ),
]


def adding_catalogue_errors(apps, schema_editor):
    error_catalogue_model = apps.get_model('integration', 'ErrorCatalogue')
    for error in ERROR_VALUES:
        code, name, description = error
        error_created, created = error_catalogue_model.objects.get_or_create(
            code=code, defaults={'error': name, 'description': description}
        )
        if created:
            logger.info(f'Integration error {error_created.code} created.')


class Migration(migrations.Migration):
    dependencies = [
        ('integration', '0036_migrate_g_suite_connections'),
    ]

    operations = [
        migrations.CreateModel(
            name='ErrorCatalogue',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=20)),
                ('error', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                (
                    'default_message',
                    tinymce.models.HTMLField(blank=True, default='', null=True),
                ),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.AlterField(
            model_name='connectionaccount',
            name='error_code',
            field=models.CharField(
                choices=[
                    ('000', 'None'),
                    ('001', 'Other'),
                    ('002', 'Insufficient Permissions'),
                    ('003', 'Missing Github Organization'),
                    ('004', 'Denial Of Consent'),
                    ('005', 'Insufficient Config Data'),
                    ('006', 'Invalid Client Credentials'),
                    ('007', 'AWS error'),
                    ('008', 'Expired account'),
                    ('009', 'Azure error'),
                    ('010', 'Google Cloud (GCP) error'),
                    ('011', 'Provider Server Error'),
                    ('012', 'Resource not found'),
                    ('013', 'API call exceeded rate limit due to too many requests'),
                    ('014', 'Github App is not installed on the organization'),
                    ('015', 'Provider Graphql API Error'),
                    ('016', 'Connection Time Out'),
                    ('017', 'Default GraphQL Error'),
                ],
                default='000',
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name='IntegrationAlert',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'error_message',
                    tinymce.models.HTMLField(blank=True, default='', null=True),
                ),
                (
                    'error_response_regex',
                    models.CharField(blank=True, default='', max_length=500, null=True),
                ),
                (
                    'error',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='integrations',
                        to='integration.errorcatalogue',
                    ),
                ),
                (
                    'integration',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='alerts',
                        to='integration.integration',
                    ),
                ),
            ],
            options={
                'ordering': ['integration__vendor'],
            },
        ),
        migrations.AddConstraint(
            model_name='errorcatalogue',
            constraint=models.UniqueConstraint(
                fields=('code',), name='integration_unique_error_code'
            ),
        ),
        migrations.AddConstraint(
            model_name='integrationalert',
            constraint=models.UniqueConstraint(
                fields=('integration', 'error', 'error_response_regex'),
                name='integration_error_re_unique_error_message',
            ),
        ),
        migrations.RunPython(adding_catalogue_errors),
    ]

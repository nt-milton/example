# Generated by Django 3.1.12 on 2022-02-10 17:45
import logging

from django.db import migrations

from integration import error_codes

logger = logging.getLogger(__name__)

ERROR_MESSAGES = [
    {
        'error_code': error_codes.BAD_CLIENT_CREDENTIALS,
        'error_message': 'Incorrect authentication credentials. Please try again.',
    },
    {
        'error_code': error_codes.INSUFFICIENT_PERMISSIONS,
        'error_message': (
            'API Permissions not detected. Please press OK below to try adding them'
            ' again.'
        ),
    },
    {
        'error_code': error_codes.MISSING_GITHUB_APP_INSTALLATION,
        'error_message': (
            'If requesting installation from your organizationâ€™s admin,'
            ' please wait for approval then complete the process again.'
        ),
    },
    {
        'error_code': error_codes.PROVIDER_SERVER_ERROR,
        'error_message': 'Service not available',
    },
]

WIZARD_ERROR_CODES = [
    {
        'wizard_error_code': '001',
        'wizard_message': 'Organization is required',
    },
    {
        'wizard_error_code': '002',
        'wizard_message': 'Organization already connected',
    },
    {
        'wizard_error_code': '003',
        'wizard_message': (
            'Github Application is not installed in the selected Organization'
        ),
    },
]
user_input_error = {
    'code': error_codes.USER_INPUT_ERROR,
    'error': 'USER_INPUT_ERROR',
    'default_wizard_message': '<p>The user entered an invalid value</p>',
    'failure_reason_mail': 'The user entered an invalid value',
    'send_email': False,
    'description': 'The user entered an invalid value',
}


def add_wizard_messages_to_error_catalogue(apps, _):
    integration_model = apps.get_model('integration', 'Integration')
    error_catalogue_model = apps.get_model('integration', 'ErrorCatalogue')
    integration = integration_model.objects.filter(
        vendor__name__iexact='Github Apps'
    ).first()
    for error in ERROR_MESSAGES:
        error_catalogue_model.objects.filter(code=error.get('error_code')).update(
            default_wizard_message=f'<p>{error.get("error_message")}</p>'
        )

    user_input_error_created = error_catalogue_model.objects.create(**user_input_error)

    if integration:
        for new_codes in WIZARD_ERROR_CODES:
            new_codes.update({'error': user_input_error_created})
            integration.alerts.create(**new_codes)
    else:
        logger.info(f'The integration called Github Apps not exist to add alerts')


class Migration(migrations.Migration):
    dependencies = [
        ('integration', '0043_add_wizard_message_to_errors'),
    ]

    operations = [migrations.RunPython(add_wizard_messages_to_error_catalogue)]

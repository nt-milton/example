# Generated by Django 3.1.12 on 2022-02-18 15:28
import logging

from django.db import migrations

from integration.error_codes import USER_INPUT_ERROR

logger = logging.getLogger(__name__)

WIZARD_ERROR_CODES_BY_VENDOR = [
    {
        'vendor_name': 'AWS',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': '<p>ARN provided is invalid</p>',
            },
            {
                'wizard_error_code': '002',
                'wizard_message': '<p>ARN was not provided</p>',
            },
        ],
    },
    {
        'vendor_name': 'Microsoft Azure',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': (
                    '<p>The credentials provided by the user are invalid</p>'
                ),
            }
        ],
    },
    {
        'vendor_name': 'Google Cloud Platform',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': (
                    '<p>The JSON file provided by the user is invalid</p>'
                ),
            }
        ],
    },
    {
        'vendor_name': 'Heroku',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': '<p>The email or API Key provided are invalid</p>',
            }
        ],
    },
    {
        'vendor_name': 'Jamf',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': (
                    '<p>Subdomain does not match with the valid format</p>'
                ),
            },
            {
                'wizard_error_code': '002',
                'wizard_message': '<p>Invalid Jamf credentials were provided</p>',
            },
        ],
    },
    {
        'vendor_name': 'Okta',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': (
                    '<p>Subdomain does not match with the valid format</p>'
                ),
            },
            {
                'wizard_error_code': '002',
                'wizard_message': '<p>Invalid Okta API Key was provided</p>',
            },
        ],
    },
    {
        'vendor_name': 'Sentry',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': '<p>Invalid Sentry Auth Token</p>',
            },
            {
                'wizard_error_code': '002',
                'wizard_message': '<p>Sentry credentials were not provided</p>',
            },
        ],
    },
    {
        'vendor_name': 'Shortcut',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': '<p>Invalid Shortcut Api Key provided</p>',
            }
        ],
    },
    {
        'vendor_name': 'Vetty',
        'wizard_error_codes': [
            {
                'wizard_error_code': '001',
                'wizard_message': '<p>Invalid Vetty Api Key provided</p>',
            }
        ],
    },
]


def add_custom_wizard_error_codes_to_integration_alerts(apps, _):
    integration_model = apps.get_model('integration', 'Integration')
    error_catalogue_model = apps.get_model('integration', 'ErrorCatalogue')
    user_input_error = error_catalogue_model.objects.filter(
        code=USER_INPUT_ERROR
    ).first()

    for vendor in WIZARD_ERROR_CODES_BY_VENDOR:
        vendor_name = vendor.get('vendor_name')
        current_integration = integration_model.objects.filter(
            vendor__name__iexact=vendor_name
        ).first()
        if current_integration:
            for new_code in vendor.get('wizard_error_codes'):
                new_code.update({'error': user_input_error})
                current_integration.alerts.get_or_create(
                    error=user_input_error,
                    wizard_error_code=new_code.get('wizard_error_code'),
                    defaults=new_code,
                )
        else:
            logger.info(
                f'The integration with the vendor: {vendor_name} '
                'does not exist to add alerts'
            )


class Migration(migrations.Migration):
    dependencies = [
        ('integration', '0046_add_gateway_timeout_error_code'),
    ]

    operations = [
        migrations.RunPython(add_custom_wizard_error_codes_to_integration_alerts)
    ]

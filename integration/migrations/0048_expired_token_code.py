# Generated by Django 3.1.12 on 2022-02-21 17:34

import logging
from typing import List

from django.db import migrations, models

logger = logging.getLogger(__name__)

OTHER_ERROR_CODE = '001'
CURRENT_AWS_ERROR_CODE = '007'
CURRENT_AZURE_ERROR_CODE = '009'
CURRENT_GCP_ERROR_CODE = '010'

OLD_EXPIRED_ACCOUNT_CODE = '008'
NEW_EXPIRED_TOKEN_CODE = '007'

AWS_ERROR = 'AWS_ERROR'
AZURE_ERROR = 'AZURE_ERROR'
GCP_ERROR = 'GCP_ERROR'
EXPIRED_ACCOUNT = 'EXPIRED_ACCOUNT'
EXPIRED_TOKEN = 'EXPIRED_TOKEN'


def _log_ids_changed(vendor_name: str, error_code: str, ids: List) -> None:
    logger.info(
        f'Updating {list(ids)} {vendor_name} connections with error '
        f'{error_code} to OTHER error code'
    )


def change_error_codes_to_other(apps, schema_editor):
    connection_model = apps.get_model('integration', 'ConnectionAccount')
    # ---------------------- UPDATE AWS ERROR CODES TO OTHER ----------------
    connections_with_aws_error = connection_model.objects.filter(
        error_code=CURRENT_AWS_ERROR_CODE
    )
    if connections_with_aws_error.exists():
        aws_ids = connections_with_aws_error.values_list('id', flat=True)
        _log_ids_changed('AWS', AWS_ERROR, aws_ids)
        connections_with_aws_error.update(error_code=OTHER_ERROR_CODE)

    # ---------------------- UPDATE AZURE ERROR CODES TO OTHER --------------
    connections_with_azure_error = connection_model.objects.filter(
        error_code=CURRENT_AZURE_ERROR_CODE
    )
    if connections_with_azure_error.exists():
        azure_ids = connections_with_azure_error.values_list('id', flat=True)
        _log_ids_changed('Azure', AZURE_ERROR, azure_ids)
        connections_with_azure_error.update(error_code=OTHER_ERROR_CODE)

    # ---------------------- UPDATE GCP ERROR CODES TO OTHER ----------------
    connections_with_gcp_error = connection_model.objects.filter(
        error_code=CURRENT_GCP_ERROR_CODE
    )
    if connections_with_gcp_error.exists():
        gcp_ids = connections_with_gcp_error.values_list('id', flat=True)
        _log_ids_changed('GCP', GCP_ERROR, gcp_ids)
        connections_with_gcp_error.update(error_code=OTHER_ERROR_CODE)


def change_expired_account_to_expired_token(apps, schema_editor):
    connection_model = apps.get_model('integration', 'ConnectionAccount')
    connections_with_expired_account_error = connection_model.objects.filter(
        error_code=OLD_EXPIRED_ACCOUNT_CODE
    )
    if connections_with_expired_account_error.exists():
        ids = connections_with_expired_account_error.values_list('id', flat=True)
        logger.info(
            f'Updating {list(ids)} connections with error '
            f'{EXPIRED_ACCOUNT} to {EXPIRED_TOKEN} error code'
        )
        connections_with_expired_account_error.update(error_code=NEW_EXPIRED_TOKEN_CODE)


def cleanup_error_catalogue(apps, schema_editor):
    error_catalogue_model = apps.get_model('integration', 'ErrorCatalogue')
    error_catalogue_model.objects.filter(
        error__in=[AWS_ERROR, AZURE_ERROR, GCP_ERROR, EXPIRED_ACCOUNT]
    ).delete()
    error_catalogue_model.objects.update_or_create(
        code=NEW_EXPIRED_TOKEN_CODE,
        defaults=dict(
            error=EXPIRED_TOKEN,
            failure_reason_mail='Expired token',
            send_email=False,
            description='Expired token',
        ),
    )


class Migration(migrations.Migration):
    dependencies = [
        ('integration', '0047_add_wizard_error_codes_to_integrations'),
    ]

    operations = [
        migrations.RunPython(change_error_codes_to_other),
        migrations.AlterField(
            model_name='connectionaccount',
            name='error_code',
            field=models.CharField(
                choices=[
                    ('000', 'None'),
                    ('001', 'Other'),
                    ('002', 'Insufficient Permissions'),
                    ('003', 'Missing Github Organization'),
                    ('004', 'Denial Of Consent'),
                    ('005', 'Insufficient Config Data'),
                    ('006', 'Invalid Client Credentials'),
                    ('007', 'Expired Token'),
                    ('011', 'Provider Server Error'),
                    ('012', 'Resource not found'),
                    ('013', 'API call exceeded rate limit due to too many requests'),
                    ('014', 'Github App is not installed on the organization'),
                    ('015', 'Provider Graphql API Error'),
                    ('016', 'Connection Time Out'),
                    ('017', 'Default GraphQL Error'),
                    ('018', 'Access Revoked'),
                    ('019', 'The user entered an invalid value'),
                    ('020', 'Gateway Timeout'),
                ],
                default='000',
                max_length=20,
            ),
        ),
        migrations.RunPython(change_expired_account_to_expired_token),
        migrations.RunPython(cleanup_error_catalogue),
    ]

# Generated by Django 3.1.12 on 2022-01-05 15:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ('organization', '0065_create_api_admin_group'),
        ('library', '0009_replace_find_questions'),
    ]

    operations = [
        migrations.AddField(
            model_name='question',
            name='metadata',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name='libraryentry',
            name='answer_text',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('completed', models.BooleanField(default=False)),
                (
                    'organization',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='questionnaires',
                        to='organization.organization',
                    ),
                ),
                (
                    'questions',
                    models.ManyToManyField(
                        blank=True, related_name='questionnaires', to='library.Question'
                    ),
                ),
            ],
        ),
        migrations.RunSQL(
            '''
                    BEGIN;
                    INSERT into
                       public.auth_group_permissions (group_id, permission_id) (
                       SELECT
                          g.id AS group_id, p.id AS permission_id 
                       FROM
                          public.auth_group g 
                          cross join
                             public.auth_permission p 
                          join django_content_type ct on ct.id = p.content_type_id 
                       WHERE
                          (
                             g.name ilike '%_admin' 
                             OR g.name ilike '%_super' 
                             OR g.name ilike '%_member'
                          )
                          AND p.codename = ANY (array [
                            'add_questionnaire',
                            'view_questionnaire',
                            'delete_questionnaire',
                            'change_questionnaire'
                            ]
                            )
                            AND ct.app_label = 'library'
                        )
                    ON CONFLICT DO NOTHING;
                    COMMIT;
                ''',
            reverse_sql='',
        ),
    ]

# Generated by Django 3.1.12 on 2022-02-28 20:21
import logging

from django.db import migrations, models
from django.db.models import Count

logger = logging.getLogger(__name__)


def is_main_question(question):
    return question.default and not question.deleted_at


def get_questions(questions):
    main_question = None
    equivalent_questions = []
    for question in questions:
        if is_main_question(question) and not main_question:
            main_question = question
        else:
            equivalent_questions.append(question)
    if not main_question and len(equivalent_questions) >= 1:
        main_question = equivalent_questions[0]
        equivalent_questions = equivalent_questions[1:]
    return main_question, equivalent_questions


def clone_duplicate_answers(apps, schema_editor):
    question_model = apps.get_model('library', 'Question')
    library_entry_model = apps.get_model('library', 'LibraryEntry')

    duplicate_entries = (
        question_model.objects.values('library_entry_id')
        .annotate(library_entry_count=Count('library_entry_id'))
        .filter(library_entry_count__gt=1)
    )

    library_entries = library_entry_model.objects.filter(
        id__in=[entry.get('library_entry_id') for entry in duplicate_entries]
    )

    for entry in library_entries:
        entry_id = entry.id
        logger.info(f'Processing Library Entry: {entry_id}')
        questions = entry.questions.all()
        if questions.count() == 1:
            continue
        try:
            main_question, equivalent_questions = get_questions(questions)
            for question in equivalent_questions:
                entry.id = None
                entry.save()
                question.default = False
                question.library_entry_id = entry.id
                question.save()
            main_question.equivalent_questions.add(*equivalent_questions)
        except Exception as err:
            logger.error(f'Error cloning duplicated answers: {entry_id} Error: {err}')


class Migration(migrations.Migration):
    dependencies = [
        ('library', '0018_migrate_questions_to_multiple_cells'),
    ]

    operations = [
        migrations.AddField(
            model_name='question',
            name='equivalent_questions',
            field=models.ManyToManyField(
                related_name='questions', to='library.Question'
            ),
        ),
        migrations.RunPython(
            clone_duplicate_answers, reverse_code=migrations.RunPython.noop
        ),
    ]

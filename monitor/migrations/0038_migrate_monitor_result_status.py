# Generated by Django 3.2.15 on 2022-10-28 19:45
import logging

from django.db import migrations

logger = logging.getLogger(__name__)


def migrate_monitor_result_status(apps, schema_editor):
    monitor_result_model = apps.get_model('monitor', 'MonitorResult')
    org_monitor_model = apps.get_model('monitor', 'OrganizationMonitor')
    for monitor_result in monitor_result_model.objects.filter(
        status='no_datasource'
    ).iterator():
        try:
            if monitor_result.result.get('error'):
                monitor_result.status = 'connection_error'
            else:
                monitor_result.status = 'no_data_detected'
            monitor_result.save()
        except Exception as err:
            logger.warning(
                f'Error updating monitor status: {monitor_result.id} Error: {err}'
            )

    for org_monitor in org_monitor_model.objects.filter(
        status='no_datasource'
    ).iterator():
        try:
            latest_result = org_monitor.monitorresult_set.latest('created_at')
            if latest_result.result.get('error'):
                org_monitor.status = 'connection_error'
            else:
                org_monitor.status = 'no_data_detected'
            org_monitor.save()
        except Exception as err:
            logger.warning(
                f'Error updating monitor status: {org_monitor.id} Error: {err}'
            )


class Migration(migrations.Migration):
    dependencies = [
        ('monitor', '0037_change_monitor_status'),
    ]

    operations = [
        migrations.RunPython(
            migrate_monitor_result_status, reverse_code=migrations.RunPython.noop
        )
    ]

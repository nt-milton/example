# Generated by Django 3.0.2 on 2020-02-17 18:13
import os
from datetime import datetime

import boto3
from django.db import migrations
from django.db.models import signals

from laika.utils.dates import YYYY_MM_DD, dynamo_timestamp_to_datetime
from laika.utils.strings import camel_to_snake

ENVIRONMENT = os.getenv('ENVIRONMENT')
LEGACY_AWS_ACCESS_KEY = os.getenv('LEGACY_AWS_ACCESS_KEY')
LEGACY_AWS_SECRET_ACCESS_KEY = os.getenv('LEGACY_AWS_SECRET_ACCESS_KEY')


def migrate_organizations(apps, schema_editor):
    Organization = apps.get_model('organization', 'Organization')
    Address = apps.get_model('address', 'Address')
    signals.post_save.disconnect(sender=Organization, dispatch_uid='post_save_org')
    env = ENVIRONMENT

    if ENVIRONMENT == 'prod':
        env = 'production'
    elif ENVIRONMENT == 'local':
        # In case we are in local we would need to get it from dev
        env = 'dev'

    client = boto3.client(
        'dynamodb',
        region_name='us-east-1',
        aws_access_key_id=LEGACY_AWS_ACCESS_KEY,
        aws_secret_access_key=LEGACY_AWS_SECRET_ACCESS_KEY,
    )

    tables_response = client.list_tables()
    table_names = tables_response.get('TableNames')
    name = [t for t in table_names if f'{env}-OrganizationTable' in t]
    organizations = []
    organization = {}

    if name:
        organization_response = client.scan(TableName=name[0])
        organizations = organization_response.get('Items')

    for o in organizations:
        for key in o:
            value = list(o[key].values())[0]
            pgKey = camel_to_snake(key)

            if (
                key == 'createdAt'
                or key == 'updatedAt'
                or key == 'businessInceptionDate'
                and value != '0'
            ):
                date_time = dynamo_timestamp_to_datetime(int(value))
                value = datetime.strftime(date_time, YYYY_MM_DD)

            if key == 'businessInceptionDate' and value == '0':
                value = None

            if key == 'companyName':
                pgKey = 'name'
            elif key == 'companyDescription':
                pgKey = 'description'

            if key == 'billingAddress':
                addressInfo = {
                    camel_to_snake(key): list(val.values())[0]
                    for (key, val) in value.items()
                }
                value = Address(**addressInfo)
                value.save()

            if key == 'id':
                id = value
            else:
                organization[pgKey] = value

        Organization.objects.update_or_create(id=id, defaults=organization)


class Migration(migrations.Migration):
    dependencies = [
        ('organization', '0003_auto_20200210_1720'),
        ('organization', '0004_make_address_not_required'),
    ]

    operations = [migrations.RunPython(migrate_organizations)]

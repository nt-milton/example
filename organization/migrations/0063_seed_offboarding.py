# Generated by Django 3.1.12 on 2021-11-24 18:41
import logging
from dataclasses import dataclass, field

from django.db import migrations

logger = logging.getLogger(__name__)


@dataclass
class Step:
    name: str
    description: str
    category: str


steps = [
    Step(
        'Step',
        f'Obtain written authorization from the employee to respond to'
        f' employment verification requests.',
        'Legal',
    ),
    Step(
        'Step', 'Pull Form I-9 to be stored with terminated employees’ I-9s.', 'Legal'
    ),
    Step(
        'Step',
        f'Pull personnel file to be stored with terminated employee files.',
        'Legal',
    ),
    Step(
        'Step',
        f'Provide letter reminding the employee of any legal '
        f'obligations that continue post-employment (such as '
        f'non-compete/confidentiality agreements/employments '
        f'contracts).',
        'Legal',
    ),
    Step(
        'Step',
        f'Notify Payroll to process severance pay and whether lump '
        f'sum or salary continuation (if applicable).',
        'Compensation',
    ),
    Step(
        'Step',
        f'Inform Payroll of any unused but earned PTO amounts due to employee.',
        'Compensation',
    ),
    Step(
        'Step',
        'Notify the Payroll department to process final paycheck.',
        'Compensation',
    ),
    Step(
        'Step',
        f'Provide notice of policy regarding any outstanding balances for '
        f'money owed to company: educational loans/pay advances.',
        'Compensation',
    ),
    Step(
        'Step',
        'Inform the employee of any applicable severance eligibility/package.',
        'Compensation',
    ),
    Step('Step', 'Inform employee about retirement plan options.', 'Benefits'),
    Step(
        'Step',
        f'Check PTO balance and inform employee of remaining PTO and how it'
        f' will be processed at the termination of employment.',
        'Benefits',
    ),
    Step(
        'Step',
        'Check DCAP participation and inform employee of remaining funds and'
        ' reimbursement deadlines, if applicable.',
        'Benefits',
    ),
    Step(
        'Step',
        f'Check FSA/HSA participation and inform the employee of remaining'
        f' funds and reimbursement deadlines, if applicable.',
        'Benefits',
    ),
    Step(
        'Step',
        f'Provide the employee with termination/continuation of employment'
        f' insurance benefits information (COBRA, life insurance,'
        f' supplemental insurance, etc.)',
        'Benefits',
    ),
    Step(
        'Step',
        f'Conduct and exit interview with the employee before the end of'
        f' their last day and retain relevant notes and feedback',
        'Employee',
    ),
    Step(
        'Step',
        'Receive and retain a copy of the employee’s Resignation Letter.',
        'Employee',
    ),
    Step(
        'Step',
        f'Collect items related to building access (ID card, building access'
        f' card, etc.)',
        'Compliance',
    ),
    Step(
        'Step',
        'Clean employee’s work area and remove personal belongings.',
        'Compliance',
    ),
    Step(
        'Step',
        f'Obtain any company equipment and physical assets from employee.',
        'Compliance',
    ),
    Step('Step', 'Disable employee’s computer access.', 'Compliance'),
    Step('Step', 'Remove employee from website/building directories', 'Compliance'),
    Step('Step', 'Remove employee from internal/office phone list.', 'Compliance'),
    Step('Step', 'Remove employee from e-mail group distribution lists.', 'Compliance'),
]


def seed_offboarding(apps, schema_editor):
    Organization = apps.get_model('organization', 'Organization')
    OrganizationChecklist = apps.get_model('organization', 'OrganizationChecklist')
    Tag = apps.get_model('tag', 'Tag')
    ActionItem = apps.get_model('action_item', 'ActionItem')

    for organization in Organization.objects.all():
        logger.info(f'Adding Offboarding for Organization: {organization.id}')
        parent_action_item = ActionItem.objects.create(
            name='Offboarding', recurrent_schedule='', metadata={'type': 'offboarding'}
        )
        tags = []
        for step in steps:
            tag, _ = Tag.objects.get_or_create(
                name=step.category,
                organization=organization,
                defaults={
                    'name': step.category,
                    'organization': organization,
                    'is_manual': True,
                },
            )
            tags.append(tag)
            ActionItem.objects.create(
                name=step.name,
                description=step.description,
                recurrent_schedule='',
                parent_action_item=parent_action_item,
                metadata={
                    'isTemplate': True,
                    'category': {'id': tag.id, 'name': tag.name},
                },
            )
        org_checklist = OrganizationChecklist.objects.create(
            action_item=parent_action_item, organization=organization
        )
        org_checklist.tags.set(tags)


class Migration(migrations.Migration):
    dependencies = [
        ('organization', '0062_change_checklist_date_to_null'),
    ]

    operations = [
        migrations.RunPython(seed_offboarding, reverse_code=migrations.RunPython.noop),
    ]

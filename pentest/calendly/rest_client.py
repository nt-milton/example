import re
from datetime import datetime

import requests

from laika.settings import DJANGO_SETTINGS
from pentest.exceptions import ResourceNotAvailable
from pentest.models import PentestRequest

CALENDLY_BASE_URL = 'https://api.calendly.com'
CALENDLY_TOKEN = DJANGO_SETTINGS.get('CALENDLY_TOKEN')

HEADERS = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {CALENDLY_TOKEN}',
}


def get_invitee(meeting_id, invitee_id):
    invitee = (
        requests.get(
            f'{CALENDLY_BASE_URL}/scheduled_events/{meeting_id}/invitees/{invitee_id}',
            headers=HEADERS,
        )
        .json()
        .get('resource')
    )
    if not invitee:
        raise ResourceNotAvailable(
            f'There are not invitees with the invitee_id: {invitee_id}'
        )

    return invitee


def get_event(meeting_id):
    event = (
        requests.get(
            f'{CALENDLY_BASE_URL}/scheduled_events/{meeting_id}',
            headers=HEADERS,
        )
        .json()
        .get('resource')
    )
    if not event:
        raise ResourceNotAvailable(
            f'There are not events with the event_id: {meeting_id}'
        )

    return event


def update_meeting_data(pentest):
    invitee = get_invitee(pentest.meeting_id, pentest.invitee_id)
    if not invitee.get('new_invitee'):
        pentest.status = PentestRequest.Status.TO_BOOK
        pentest.meeting_id = None
        pentest.invitee_id = None
        pentest.save()
        return

    new_meeting_id, new_invitee_id, *_ = re.search(
        'events/(.*)/invitees/(.*)', invitee['new_invitee']
    ).groups()
    pentest.meeting_id = new_meeting_id
    pentest.invitee_id = new_invitee_id
    pentest.save()


def validate_meeting_data(pentest):
    event = get_event(pentest.meeting_id)
    if event.get('cancellation'):
        update_meeting_data(pentest)


def get_calendly_event_details(meeting_id):
    event = get_event(meeting_id)
    user_link_id = event['event_memberships'][0]['user']
    owner_name = get_event_owner(user_link_id)
    if not owner_name:
        return None

    return {
        'name': event['name'],
        'start_time': datetime.strptime(event['start_time'],
                                        '%Y-%m-%dT%H:%M:%S.%fZ'),
        'owner_name': owner_name,
    }


def get_event_owner(user_link_id):
    resource = requests.get(user_link_id, headers=HEADERS, ) \
        .json().get('resource', {})
    return resource.get('name')

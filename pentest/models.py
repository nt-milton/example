import uuid

from django.db import models
from django.utils.translation import gettext_lazy as _

from laika.storage import PrivateMediaStorage
from organization.models import Organization
from user.models import Partner, User


def attachment_upload_directory(instance, filename):
    organization_id = instance.pentest_request.organization.id
    pentest_request_id = instance.pentest_request.id
    return f'{organization_id}/{pentest_request_id}/attachment/{filename}'


class PentestRequest(models.Model):
    class Status(models.TextChoices):
        REQUESTED = 'requested', _('Requested')
        TO_BOOK = 'to_book', _('To book')
        BOOKED = 'booked', _('Booked')
        IN_PROGRESS = 'in_progress', _('In Progress')
        READY = 'ready', _('Ready')
        COMPLETED = 'completed', _('Completed')
        REJECTED = 'rejected', _('Rejected')

    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
    created_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    target_date = models.DateField()
    name = models.CharField(max_length=64, blank=True)
    organization = models.ForeignKey(
        Organization,
        on_delete=models.CASCADE,
        related_name='pentest_requests',
    )
    status = models.TextField(
        choices=Status.choices,
        default=Status.REQUESTED,
    )
    questionary_response = models.JSONField(null=True, blank=True)
    meeting_id = models.UUIDField(null=True, blank=True)
    invitee_id = models.UUIDField(null=True, blank=True)
    partner = models.ForeignKey(
        Partner,
        on_delete=models.CASCADE,
        related_name='pentest_requests',
        blank=True,
        null=True,
    )

    def save(self, *args, **kwargs):
        old_instance = PentestRequest.objects.filter(id=self.id).first()
        if old_instance is None:
            PentestEvent.objects.create(
                pentest_request=self, event_type=PentestEvent.Type.CREATED
            )
        else:
            if self.status != old_instance.status:
                PentestEvent.objects.create(
                    pentest_request=self,
                    event_type=PentestEvent.Type.STATUS_CHANGE,
                    status=self.status,
                )
        super(PentestRequest, self).save(*args, **kwargs)


class PentestAttachment(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
    third_party_id = models.CharField(max_length=32, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    is_deleted = models.BooleanField(default=False)
    name = models.CharField(max_length=32, blank=True, default='')
    pentest_request = models.ForeignKey(
        PentestRequest,
        on_delete=models.CASCADE,
        related_name='attachments',
    )
    file = models.FileField(
        storage=PrivateMediaStorage(),
        upload_to=attachment_upload_directory,
        null=True,
        blank=True,
    )
    executive_summary = models.TextField(blank=True, default='')
    critical_vulnerabilities = models.IntegerField(blank=True, default=0)
    high_vulnerabilities = models.IntegerField(blank=True, default=0)
    medium_vulnerabilities = models.IntegerField(blank=True, default=0)
    low_vulnerabilities = models.IntegerField(blank=True, default=0)
    info_vulnerabilities = models.IntegerField(blank=True, default=0)

    def save(self, *args, **kwargs):
        old_instance = PentestAttachment.objects.filter(id=self.id).first()
        if old_instance is None:
            PentestEvent.objects.create(
                pentest_request=self.pentest_request,
                event_type=PentestEvent.Type.FILE_ADDED,
                status=self.pentest_request.status,
            )
        super(PentestAttachment, self).save(*args, **kwargs)


class PentestEvent(models.Model):
    class Type(models.TextChoices):
        CREATED = 'created', _('Created')
        FILE_ADDED = 'file_added', _('File added')
        STATUS_CHANGE = 'status_change', _('Status change')

    pentest_request = models.ForeignKey(PentestRequest, on_delete=models.CASCADE)
    event_date = models.DateTimeField(auto_now_add=True)
    event_type = models.TextField(choices=Type.choices)
    status = models.TextField(blank=True, default='')

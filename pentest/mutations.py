import graphene

from action_item.evidence_handler import create_action_item_evidence
from action_item.utils import get_recurrent_last_action_item
from control.evidence_handler import create_control_evidence
from evidence import constants
from laika.decorators import concierge_service, laika_service
from laika.utils.exceptions import ServiceException
from pentest.constants import EmailType
from pentest.models import PentestAttachment, PentestRequest
from pentest.typeform.rest_client import get_typeform_answer_from_response
from pentest.types import TYPEFORM_PENTEST_FORM, PentestType
from pentest.utils import get_pentest_control, send_pentest_email
from user.models import Partner

RECURRENT_ACTION_ITEM = 'CA-R-013'
IMPLEMENTATION_ACTION_ITEM = 'CA-S-014'
COMPLETED_ACTION_ITEM = 'completed'
IMPLEMENTED_CONTROL = 'IMPLEMENTED'


class CreatePentest(graphene.Mutation):
    id = graphene.String()

    class Arguments:
        id = graphene.String()
        name = graphene.String()
        target_date = graphene.Date()

    @laika_service(
        atomic=False,
        permission='pentest.add_pentestrequest',
        exception_msg='Failed to add pentest',
    )
    def mutate(self, info, **kwargs):
        user = info.context.user
        organization = user.organization
        pentest = PentestRequest.objects.create(
            id=kwargs['id'],
            name=kwargs['name'],
            target_date=kwargs['target_date'],
            created_by=user,
            organization=organization,
        )
        return CreatePentest(id=pentest.id)


class SetQuestionaryResponse(graphene.Mutation):
    pentest = graphene.Field(PentestType)

    class Arguments:
        pentest_request_id = graphene.ID(required=True)
        response_id = graphene.ID(required=True)

    @laika_service(
        atomic=False,
        permission='pentest.change_pentestrequest',
        exception_msg='Failed to set questionary response for pentest',
    )
    def mutate(self, info, **kwargs):
        organization = info.context.user.organization
        pentest_request = PentestRequest.objects.get(
            id=kwargs['pentest_request_id'], organization=organization
        )
        questionary_response = get_typeform_answer_from_response(
            TYPEFORM_PENTEST_FORM, kwargs['response_id']
        )
        if not questionary_response:
            raise ServiceException('Questionary response was not found')
        pentest_request.questionary_response = questionary_response
        pentest_request.save()
        return SetQuestionaryResponse(pentest=pentest_request)


class CompletePentest(graphene.Mutation):
    class Arguments:
        id = graphene.ID(required=True)

    Output = PentestType

    @laika_service(
        atomic=True,
        permission='pentest.change_pentestrequest',
        exception_msg='Failed to mark pentest as completed',
    )
    def mutate(self, info, **kwargs):
        pentest = PentestRequest.objects.get(
            id=kwargs['id'],
            organization=info.context.user.organization_id,
        )
        pentest.status = PentestRequest.Status.COMPLETED
        pentest.save()
        create_pentest_evicence(pentest, info.context.user.organization)
        return pentest


def create_pentest_evicence(pentest_request, organization):
    pentest_control = get_pentest_control(organization)
    if not pentest_control:
        return
    is_control_completed = pentest_control.status == IMPLEMENTED_CONTROL
    reference_id = (
        RECURRENT_ACTION_ITEM if is_control_completed else IMPLEMENTATION_ACTION_ITEM
    )
    action_item = get_recurrent_last_action_item(reference_id, organization.id)
    create_report(action_item, organization, pentest_request, pentest_control)


def create_report(action_item, organization, pentest_request, pentest_control):
    pentest_attachment = (
        PentestAttachment.objects.filter(pentest_request__id=pentest_request.id)
        .order_by('-created_at')
        .first()
    )
    file = pentest_attachment.file
    if not file:
        return
    evidence = {}
    if action_item and action_item.status != COMPLETED_ACTION_ITEM:
        evidence = create_action_item_evidence(
            organization, action_item, file, constants.FILE
        )
    else:
        evidence = create_control_evidence(organization, pentest_control, file)

    evidence.name = pentest_attachment.name
    evidence.save()


class BookPentestMeeting(graphene.Mutation):
    pentest = graphene.Field(PentestType)

    class Arguments:
        pentest_request_id = graphene.ID(required=True)
        meeting_id = graphene.String(required=True)
        invitee_id = graphene.String(required=True)

    @laika_service(
        atomic=False,
        permission='pentest.change_pentestrequest',
        exception_msg='Failed to book a pentest meeting',
    )
    def mutate(self, info, **kwargs):
        pentest_request = PentestRequest.objects.get(
            pk=kwargs['pentest_request_id'],
        )
        pentest_request.status = PentestRequest.Status.BOOKED
        pentest_request.meeting_id = kwargs['meeting_id']
        pentest_request.invitee_id = kwargs['invitee_id']
        pentest_request.save()
        return BookPentestMeeting(pentest=pentest_request)


class SetPentestPartner(graphene.Mutation):
    pentest = graphene.Field(PentestType)

    class Arguments:
        partner_id = graphene.ID(required=True)
        pentest_id = graphene.ID(required=True)

    @concierge_service(
        atomic=False,
        permission='pentest.change_pentestrequest',
        exception_msg='Failed to set a partner',
    )
    def mutate(self, info, **kwargs):
        partner_id = kwargs['partner_id']
        partner = Partner.objects.get(id=partner_id)
        pentest_id = kwargs['pentest_id']
        pentest = PentestRequest.objects.get(id=pentest_id)
        pentest.partner = partner
        pentest.status = PentestRequest.Status.TO_BOOK
        pentest.save()
        send_pentest_email(pentest, EmailType.TO_BOOK.value)
        return SetPentestPartner(pentest=pentest)

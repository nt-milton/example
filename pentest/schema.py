import graphene

from laika.decorators import concierge_service, laika_service
from pentest.calendly.rest_client import validate_meeting_data
from pentest.models import PentestRequest
from pentest.mutations import (
    BookPentestMeeting,
    CompletePentest,
    CreatePentest,
    SetPentestPartner,
    SetQuestionaryResponse,
)
from pentest.types import PentestResponseType, PentestType


class Mutation(object):
    create_pentest = CreatePentest.Field()
    set_questionary_response = SetQuestionaryResponse.Field()
    complete_pentest = CompletePentest.Field()
    book_pentest_meeting = BookPentestMeeting.Field()
    concierge_set_pentest_partner = SetPentestPartner.Field()


class Query(object):
    pentest = graphene.Field(PentestType, id=graphene.ID(required=True))
    pentests = graphene.Field(PentestResponseType)
    concierge_pentests = graphene.Field(
        PentestResponseType, organization_id=graphene.ID(required=True)
    )

    @laika_service(
        permission='pentest.view_pentestrequest', exception_msg='Failed to get pentest'
    )
    def resolve_pentest(self, info, **kwargs):
        pentest = PentestRequest.objects.get(
            id=kwargs['id'],
            organization_id=info.context.user.organization_id,
        )
        if pentest.meeting_id:
            validate_meeting_data(pentest)
        return pentest

    @laika_service(
        permission='pentest.view_pentestrequest',
        exception_msg='Failed to list pentests',
    )
    def resolve_pentests(self, info, **kwargs):
        return PentestResponseType(
            data=PentestRequest.objects.filter(
                organization=info.context.user.organization
            )
            .exclude(status='rejected')
            .order_by('-created_at')
        )

    @concierge_service(
        permission='pentest.view_pentestrequest',
        exception_msg='Failed to list pentests',
    )
    def resolve_concierge_pentests(self, info, **kwargs):
        return PentestResponseType(
            data=PentestRequest.objects.filter(
                questionary_response__isnull=False,
                organization__id=kwargs['organization_id'],
            )
            .exclude(status='rejected')
            .order_by('-created_at')
        )

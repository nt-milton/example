import pytest

from laika.tests import mock_responses
from pentest.models import PentestRequest
from pentest.tests.factory import GET_PENTEST_DETAILS, create_pentest, load_response


@pytest.fixture
def pentest_with_booked_meeting(admin_user, graphql_organization):
    pentest = create_pentest(
        'pentest',
        'booked',
        admin_user,
        graphql_organization,
        '6261fe98-d335-4860-9afd-73219d55e4da',
        '1b057a40-19c4-4ee7-afb7-664454b17dff',
    )
    yield pentest


CALENDLY_EVENT_USER_RESPONSE = [
    load_response('get_event_response.json'),
    load_response('get_user_response.json'),
]


@pytest.fixture
def calendly_event_responses():
    responses = [
        load_response('get_event_response.json'),
        *CALENDLY_EVENT_USER_RESPONSE,
    ]
    with mock_responses(responses):
        yield responses


@pytest.fixture
def calendly_reschedule_event_responses():
    responses = [
        load_response('get_event_cancelled_response.json'),
        load_response('get_event_invitees.json'),
        *CALENDLY_EVENT_USER_RESPONSE,
    ]
    with mock_responses(responses):
        yield responses


@pytest.fixture
def calendly_canceled_event_responses():
    responses = [
        load_response('get_event_cancelled_response.json'),
        load_response('get_event_invitee_canceled_meeting.json'),
    ]
    with mock_responses(responses):
        yield responses


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentest_details_with_meeting_id(
    graphql_client,
    pentest_with_booked_meeting,
    calendly_event_responses,
):
    original_pentest = pentest_with_booked_meeting
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': original_pentest.id}
    )
    pentest = response['data']['pentest']
    assert str(original_pentest.id) == pentest['id']
    assert original_pentest.status == pentest['status']
    assert pentest['meetingData']['ownerName'] == 'Laika Test'


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentest_details_with_cancelled_event(
    graphql_client,
    pentest_with_booked_meeting,
    calendly_reschedule_event_responses,
):
    original_pentest = pentest_with_booked_meeting
    previous_meeting_id = original_pentest.meeting_id
    previous_invitee_id = original_pentest.invitee_id
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': original_pentest.id}
    )
    pentest = response['data']['pentest']
    assert str(previous_meeting_id) != pentest['meetingId']
    assert str(previous_invitee_id) != pentest['inviteeId']


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_validate_pentest_status_change_in_a_canceled_meeting(
    graphql_client,
    pentest_with_booked_meeting,
    calendly_canceled_event_responses,
):
    original_pentest = pentest_with_booked_meeting
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': original_pentest.id}
    )
    pentest = response['data']['pentest']
    assert pentest['status'] == PentestRequest.Status.TO_BOOK
    assert pentest['meetingId'] is None
    assert pentest['inviteeId'] is None

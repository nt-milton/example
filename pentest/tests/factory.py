import uuid
from pathlib import Path

from django.core.files import File
from django.utils import timezone

from control.tests import create_control
from control.tests.factory import create_action_item
from pentest.models import PentestAttachment, PentestRequest
from pentest.utils import CONTROL_REFERENCE_ID, PARTNER_ID
from user.models import Partner

GET_PENTESTS = '''
        query pentests {
            pentests {
                data {
                    id
                    status
                    name
                    createdBy {
                      email
                    }
                    createdAt
                    updatedAt
                    targetDate
                    questionaryResponse
                    meetingId
                    inviteeId
                    meetingData {
                      name
                      ownerName
                      startTime
                    }
                    lastAttachment {
                      id
                      isDeleted
                      thirdPartyId
                      createdAt
                      name
                      url
                    }
                    pentestCalendlyEventUrl
                }
            }
        }
        '''

CREATE_PENTEST = '''
    mutation(
      $id: String!,
      $name: String,
      $targetDate: Date
    ) {
      createPentest(
        id: $id,
        name: $name,
        targetDate: $targetDate
      )
        {
          id
        }
    }
    '''

SET_QUESTIONARY_RESPONSE = '''
    mutation($pentestRequestId: ID!, $responseId: ID!) {
      setQuestionaryResponse(
        pentestRequestId: $pentestRequestId,
        responseId: $responseId
      ) {
        pentest {
          id
          questionaryResponse
        }
      }
    }
    '''

GET_PENTEST_DETAILS = '''
    query pentest($id: ID!) {
      pentest(id: $id) {
        id
        status
        attachments {
          id
        }
        meetingId
        inviteeId
        meetingData {
          name
          ownerName
          startTime
        }
        pentestCalendlyEventUrl
        pentestControl
        pentestTypeformId
      }
    }
    '''

COMPLETE_PENTEST = '''
    mutation completePentest($id: ID!) {
      completePentest(id: $id) {
        id
        status
      }
    }
    '''

BOOK_PENTEST_MEETING = '''
    mutation(
      $pentestRequestId: ID!
      $meetingId: String!
      $inviteeId: String!
    ) {
      bookPentestMeeting(
        pentestRequestId: $pentestRequestId
        meetingId: $meetingId
        inviteeId: $inviteeId
      ) {
        pentest {
          id
          meetingId
        }
      }
    }
    '''

GET_CONCIERGE_PENTESTS = '''
    query conciergePentests($organizationId: ID!) {
        conciergePentests(organizationId: $organizationId) {
            data {
                id
                status
                name
                createdBy {
                    email
                }
                createdAt
                updatedAt
                targetDate
                questionaryResponse
                meetingId
                inviteeId
                meetingData {
                    name
                    ownerName
                    startTime
                }
                lastAttachment {
                    id
                    isDeleted
                    thirdPartyId
                    createdAt
                    name
                    url
                }
                pentestCalendlyEventUrl
            }
        }
    }
'''


CONCIERGE_SET_PENTEST_PARTNER = '''
    mutation conciergeSetPentestPartner($partnerId: ID!, $pentestId: ID!) {
        conciergeSetPentestPartner(
            partnerId: $partnerId,
            pentestId: $pentestId
        ) {
            pentest {
                id
                name
                status
                partner {
                    id
                    name
                }
            }
        }
    }
'''


def load_response(file_name, path=Path(__file__).parent, binary=False):
    parent_path = path / 'mock_files'
    mode = 'rb' if binary else 'r'
    with open(parent_path / file_name, mode) as file:
        return file.read()


def create_partner():
    return Partner.objects.create(
        id=PARTNER_ID,
        name='WhiteJaguars',
        type='pentest',
        calendar='https://calendly.com/laika-dev/pentest-partner-meeting-test',
        typeform='test',
    )


def create_pentest(name, status, user, org, meeting_id=None, invitee_id=None, **kwargs):
    return PentestRequest.objects.create(
        id=uuid.uuid4(),
        status=status,
        created_by=user,
        created_at=timezone.now(),
        updated_at=timezone.now(),
        target_date=timezone.now(),
        name=name,
        organization=org,
        meeting_id=meeting_id,
        invitee_id=invitee_id,
        **kwargs
    )


def create_pentest_attachment(pentest_request, name, is_deleted=False):
    return PentestAttachment.objects.create(
        pentest_request=pentest_request, name=name, is_deleted=is_deleted
    )


def add_control_with_action_item(
    graphql_organization, control_status, action_item_status, reference_id
):
    action_item = create_action_item(
        name='pentest',
        metadata={
            'referenceId': reference_id,
            'organizationId': str(graphql_organization.id),
        },
        status=action_item_status,
    )
    control = create_control(
        organization=graphql_organization,
        display_id=1,
        name='Control Test',
        description='Testing update control',
        implementation_notes='<p>testing controls</p>',
        reference_id=CONTROL_REFERENCE_ID,
        status=control_status,
    )
    control.action_items.add(action_item)
    control.save()


def add_attachment_to_pentest(pentest_request, attachment_report):
    PentestAttachment.objects.create(
        pentest_request=pentest_request,
        name='test',
        is_deleted=False,
        file=File(attachment_report, name='attachment.txt'),
    )

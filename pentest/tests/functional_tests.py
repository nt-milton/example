import datetime
import uuid
from unittest.mock import patch

import pytest

from action_item.models import ActionItem
from control.models import Control
from control.tests.factory import create_control
from feature.constants import new_controls_feature_flag
from pentest.models import PentestEvent, PentestRequest
from pentest.mutations import (
    COMPLETED_ACTION_ITEM,
    IMPLEMENTATION_ACTION_ITEM,
    IMPLEMENTED_CONTROL,
    RECURRENT_ACTION_ITEM,
    create_pentest_evicence,
)
from pentest.tests.factory import (
    BOOK_PENTEST_MEETING,
    COMPLETE_PENTEST,
    CONCIERGE_SET_PENTEST_PARTNER,
    CREATE_PENTEST,
    GET_CONCIERGE_PENTESTS,
    GET_PENTEST_DETAILS,
    GET_PENTESTS,
    add_attachment_to_pentest,
    add_control_with_action_item,
    create_partner,
    create_pentest,
    create_pentest_attachment,
)
from pentest.utils import CONTROL_REFERENCE_ID, pentest_partner_migration
from user.models import Partner, PartnerType


@pytest.mark.functional(permissions=['pentest.add_pentestrequest'])
def test_create_pentest(graphql_client):
    create_partner()
    id = uuid.uuid4()
    graphql_client.execute(
        CREATE_PENTEST,
        variables={'id': id, 'name': 'Pentest Name', 'targetDate': '2022-02-09'},
    )
    pentest = PentestRequest.objects.get(id=id)
    assert pentest.target_date == datetime.date(2022, 2, 9)


@pytest.fixture
def pentests_list(admin_user, graphql_organization):
    status_list = ['requested', 'completed', 'in_progress', 'rejected']
    for idx, status in enumerate(status_list):
        create_pentest(
            f'pentest{idx}',
            status,
            admin_user,
            graphql_organization,
            questionary_response=['test'],
        )


ATTACHMENTS_PER_PENTEST = 3


@pytest.fixture
def pentest_with_attachments(admin_user, graphql_organization):
    pentest = create_pentest('pentest', 'in_progress', admin_user, graphql_organization)
    attachments = [
        create_pentest_attachment(pentest, f'pentest_attachment_{i}')
        for i in range(ATTACHMENTS_PER_PENTEST)
    ]
    yield pentest, attachments


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentests(graphql_client, pentests_list):
    response = graphql_client.execute(GET_PENTESTS)
    pentests = response['data']['pentests']['data']
    assert len(pentests) == 3


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentest_details(graphql_client, pentest_with_attachments):
    original_pentest, original_attachments = pentest_with_attachments
    create_pentest_attachment(original_pentest, 'deleted pentest', True)
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': original_pentest.id}
    )
    pentest = response['data']['pentest']
    original_attachment_ids = {
        str(attachment.id) for attachment in original_attachments
    }
    attachments_ids = {attachment['id'] for attachment in pentest['attachments']}
    assert str(original_pentest.id) == pentest['id']
    assert original_pentest.status == pentest['status']
    assert original_attachment_ids == attachments_ids


@pytest.mark.functional(permissions=['pentest.change_pentestrequest'])
def test_pentest_creation_event(admin_user, graphql_organization):
    pentest = create_pentest(
        'pentest', PentestRequest.Status.REQUESTED, admin_user, graphql_organization
    )
    pentest_events = PentestEvent.objects.filter(
        pentest_request=pentest, event_type=PentestEvent.Type.CREATED
    )
    assert pentest_events.exists()
    assert PentestEvent.objects.count() == 1


@pytest.mark.functional(permissions=['pentest.change_pentestrequest'])
def test_valid_pentest_status_change_event(admin_user, graphql_organization):
    pentest = create_pentest(
        'pentest', PentestRequest.Status.REQUESTED, admin_user, graphql_organization
    )
    pentest.status = PentestRequest.Status.IN_PROGRESS
    pentest.save()
    pentest_events = PentestEvent.objects.filter(
        pentest_request=pentest, event_type=PentestEvent.Type.STATUS_CHANGE
    )
    assert pentest_events.exists()
    assert PentestEvent.objects.count() == 2


@pytest.mark.functional(permissions=['pentest.change_pentestrequest'])
def test_invalid_pentest_status_change_event(admin_user, graphql_organization):
    pentest = create_pentest(
        'pentest', PentestRequest.Status.REQUESTED, admin_user, graphql_organization
    )
    pentest.status = PentestRequest.Status.REQUESTED
    pentest.save()
    pentest_events = PentestEvent.objects.filter(
        pentest_request=pentest, event_type=PentestEvent.Type.STATUS_CHANGE
    )
    assert not pentest_events.exists()
    assert PentestEvent.objects.count() == 1


@pytest.mark.functional(permissions=['pentest.change_pentestrequest'])
def test_pentest_file_added_event(admin_user, graphql_organization):
    pentest = create_pentest(
        'pentest', PentestRequest.Status.REQUESTED, admin_user, graphql_organization
    )
    create_pentest_attachment(pentest, 'testing', False)
    pentest_events = PentestEvent.objects.filter(
        pentest_request=pentest, event_type=PentestEvent.Type.FILE_ADDED
    )
    assert pentest_events.exists()
    assert PentestEvent.objects.count() == 2


@pytest.mark.functional(permissions=['pentest.change_pentestrequest'])
def test_complete_pentest(graphql_client, graphql_organization, admin_user):
    pentest = create_pentest(
        'pentest', PentestRequest.Status.REQUESTED, admin_user, graphql_organization
    )
    response = graphql_client.execute(COMPLETE_PENTEST, variables={'id': pentest.id})
    pentest.refresh_from_db()
    pentest_response = response['data']['completePentest']
    assert str(pentest.id) == pentest_response['id']
    assert pentest.status == PentestRequest.Status.COMPLETED
    assert pentest_response['status'] == PentestRequest.Status.COMPLETED
    assert PentestEvent.objects.filter(
        pentest_request=pentest, event_type=PentestEvent.Type.STATUS_CHANGE
    ).exists()


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
@pytest.mark.parametrize(
    'control_status, action_item_status, reference_id',
    [
        (IMPLEMENTED_CONTROL, 'pending', RECURRENT_ACTION_ITEM),
        ('NOT IMPLEMENTED', 'pending', IMPLEMENTATION_ACTION_ITEM),
    ],
)
def test_create_pentest_evidence(
    pentest_request,
    admin_user,
    graphql_organization,
    attachment_report,
    control_status,
    action_item_status,
    reference_id,
):
    add_attachment_to_pentest(pentest_request, attachment_report)
    add_control_with_action_item(
        graphql_organization, control_status, action_item_status, reference_id
    )
    create_pentest_evicence(pentest_request, graphql_organization)
    assert (
        len(
            ActionItem.objects.get(
                metadata__referenceId=reference_id,
                metadata__organizationId=str(graphql_organization.id),
            ).evidences.all()
        )
        == 1
    )


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_create_pentest_evidence_completed_action_item(
    pentest_request, admin_user, graphql_organization, attachment_report
):
    add_attachment_to_pentest(pentest_request, attachment_report)
    add_control_with_action_item(
        graphql_organization,
        IMPLEMENTED_CONTROL,
        COMPLETED_ACTION_ITEM,
        RECURRENT_ACTION_ITEM,
    )
    create_pentest_evicence(pentest_request, graphql_organization)
    assert (
        len(
            ActionItem.objects.get(
                metadata__referenceId=RECURRENT_ACTION_ITEM,
                metadata__organizationId=str(graphql_organization.id),
            ).evidences.all()
        )
        == 0
    )
    assert (
        len(
            Control.objects.get(
                reference_id=CONTROL_REFERENCE_ID,
                organization_id=graphql_organization.id,
            ).evidence.all()
        )
        == 1
    )


@pytest.mark.functional(permissions=['pentest.change_pentestrequest'])
def test_book_pentest_meeting(graphql_client, graphql_organization, admin_user):
    pentest = create_pentest(
        'pentest', PentestRequest.Status.REQUESTED, admin_user, graphql_organization
    )
    pentest.id = '26ed4009-6fdb-4330-af47-ec6cfbeba799'
    pentest.save()
    response = graphql_client.execute(
        BOOK_PENTEST_MEETING,
        variables={
            'pentestRequestId': pentest.id,
            'meetingId': '6261fe98-d335-4860-9afd-73219d55e4da',
            'inviteeId': '1b057a40-19c4-4ee7-afb7-664454b17dff',
        },
    )
    pentest.refresh_from_db()
    pentest_response = response['data']['bookPentestMeeting']
    assert str(pentest.id) == pentest_response['pentest']['id']
    assert pentest.status == PentestRequest.Status.BOOKED
    assert str(pentest.meeting_id) == pentest_response['pentest']['meetingId']


@pytest.fixture
def testing_pentest(admin_user, graphql_organization):
    return create_pentest(
        'pentest', PentestRequest.Status.READY, admin_user, graphql_organization
    )


@pytest.fixture
def testing_pentest_control(admin_user, graphql_organization):
    return create_control(
        organization=graphql_organization,
        display_id=1,
        name='test control',
        reference_id=CONTROL_REFERENCE_ID,
    )


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentest_control(
    graphql_client,
    graphql_organization,
    testing_pentest,
    testing_pentest_control,
):
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': testing_pentest.id}
    )
    pentest = response['data']['pentest']
    assert pentest['pentestControl'] == str(testing_pentest_control.id)


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentest_control_without_flag(
    graphql_client,
    graphql_organization,
    testing_pentest,
    testing_pentest_control,
):
    graphql_organization.feature_flags.filter(name=new_controls_feature_flag).delete()
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': testing_pentest.id}
    )
    pentest = response['data']['pentest']
    assert not pentest['pentestControl']


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentest_control_without_ready_status(
    graphql_client,
    graphql_organization,
    testing_pentest,
    testing_pentest_control,
):
    testing_pentest.status = PentestRequest.Status.IN_PROGRESS
    testing_pentest.save()
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': testing_pentest.id}
    )
    pentest = response['data']['pentest']
    assert not pentest['pentestControl']


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_pentest_control_without_control(
    graphql_client,
    graphql_organization,
    testing_pentest,
):
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': testing_pentest.id}
    )
    pentest = response['data']['pentest']
    assert not pentest['pentestControl']


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_partner_migration(testing_pentest):
    assert testing_pentest.partner is None

    pentest_partner_migration(Partner, PentestRequest)

    testing_pentest.refresh_from_db()
    assert testing_pentest.partner


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_calendar_url_from_partner(testing_pentest, graphql_client):
    testing_pentest.partner = create_partner()
    testing_pentest.save()
    calendar_url = testing_pentest.partner.calendar
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': testing_pentest.id}
    )
    pentest = response['data']['pentest']
    assert pentest['pentestCalendlyEventUrl'] == calendar_url


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_get_concierge_pentests(graphql_client, graphql_organization, pentests_list):
    response = graphql_client.execute(
        GET_CONCIERGE_PENTESTS, variables={'organizationId': graphql_organization.id}
    )
    pentests = response['data']['conciergePentests']['data']
    assert len(pentests) == 3


@pytest.mark.functional(permissions=['pentest.change_pentestrequest'])
@patch('pentest.mutations.send_pentest_email')
def test_concierge_set_pentest_partner(
    send_pentest_email, admin_user, graphql_client, graphql_organization
):
    pentest_request = create_pentest(
        'pentest_request', PentestRequest.Status.READY, admin_user, graphql_organization
    )
    partner = Partner.objects.create(
        name='testing_partner',
        type=PartnerType.PENTEST,
    )
    response = graphql_client.execute(
        CONCIERGE_SET_PENTEST_PARTNER,
        variables={'partnerId': partner.id, 'pentestId': pentest_request.id},
    )

    pentest_res = response['data']['conciergeSetPentestPartner']['pentest']
    partner_res = pentest_res['partner']
    assert pentest_res['id'] == str(pentest_request.id)
    assert pentest_res['status'] == PentestRequest.Status.TO_BOOK
    assert partner_res['id'] == str(partner.id)
    send_pentest_email.assert_called_with(pentest_request, 'TO_BOOK')


@pytest.mark.functional(permissions=['pentest.view_pentestrequest'])
def test_typeform_partner(testing_pentest, graphql_client):
    testing_pentest.partner = create_partner()
    testing_pentest.save()
    response = graphql_client.execute(
        GET_PENTEST_DETAILS, variables={'id': testing_pentest.id}
    )
    pentest = response['data']['pentest']
    assert pentest['pentestTypeformId'] != testing_pentest.partner.typeform

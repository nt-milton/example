import contextlib
from http import HTTPStatus
from pathlib import Path
from unittest.mock import patch

import pytest
from django.test import Client

from organization.tests import create_organization
from pentest.models import PentestAttachment, PentestRequest
from pentest.tests.factory import create_pentest
from user.models import Partner, PartnerType, User
from user.partner.tests.test_views import TEST_PASS, USERNAME, create_pentest_user

PENTEST_HOME = '/pentest/'
PentestStatus = PentestRequest.Status
FILE_NAME = 'attachment.png'


@pytest.fixture()
def browser():
    create_pentest_user()
    client = Client()
    client.login(username=USERNAME, password=TEST_PASS)
    yield client


@pytest.mark.django_db
def test_home_pentest_empty(browser):
    response = browser.get(PENTEST_HOME)

    html = response.content.decode('utf8')
    assert response.status_code == 200
    assert 'No pentest are available' in html


@pytest.mark.django_db
def test_home_pentest_filter(browser):
    requested = pentest(
        'Pentest_no_partner',
        PentestStatus.REQUESTED,
    )
    to_book = pentest(
        'Pentest_with_partner',
        PentestStatus.TO_BOOK,
    )
    assign_partner(to_book)

    response = browser.get(PENTEST_HOME)

    html = response.content.decode('utf8')
    assert requested.name not in html
    assert to_book.name in html


@pytest.mark.django_db
def test_pentest_detail(browser):
    detail = pentest(
        'Pentest_detail',
        PentestStatus.REQUESTED,
    )
    assign_partner(detail)

    response = browser.get(f'{PENTEST_HOME}{detail.id}/')

    html = response.content.decode('utf8')
    assert detail.status in html
    assert detail.name in html


@pytest.mark.django_db
def test_booked_show_in_progress_action(browser):
    detail = pentest(
        'Pentest_detail',
        PentestStatus.BOOKED,
    )
    assign_partner(detail)

    response = browser.get(f'{PENTEST_HOME}{detail.id}/')

    html = response.content.decode('utf8')
    assert 'Pentest is in progress' in html


@pytest.mark.django_db
def test_in_progress_show_add_attachment(browser):
    detail = pentest(
        'Pentest_detail',
        PentestStatus.IN_PROGRESS,
    )
    assign_partner(detail)

    response = browser.get(f'{PENTEST_HOME}{detail.id}/')

    html = response.content.decode('utf8')
    assert 'Add Attachment' in html


@pytest.mark.django_db
@patch('pentest.views.send_pentest_email')
def test_start_view(send_pentest_email, browser):
    detail = pentest(
        'Pentest_detail',
        PentestStatus.BOOKED,
    )
    assign_partner(detail)

    response = browser.post(
        f'{PENTEST_HOME}{detail.id}/start/', {'pentest_id': detail.id}
    )

    detail.refresh_from_db()
    assert response.status_code == 302
    assert detail.status == PentestStatus.IN_PROGRESS
    send_pentest_email.assert_called_with(detail, 'IN_PROGRESS')


@contextlib.contextmanager
def attachment_upload(detail: PentestRequest, browser: Client, status: str):
    attachment_path = Path(__file__).parent / f'mock_files/{FILE_NAME}'
    with open(attachment_path, 'rb') as file:
        yield browser.post(
            f'{PENTEST_HOME}{detail.id}/upload/',
            {'pentest_id': detail.id, 'status': status, 'attachment': file},
        )


@pytest.mark.django_db
@patch('pentest.views.send_pentest_email')
def test_upload_view(send_pentest_email, browser):
    detail = pentest(
        'Pentest_detail',
        PentestStatus.IN_PROGRESS,
    )
    assign_partner(detail)

    with attachment_upload(detail, browser, 'in_progress') as response:
        detail.refresh_from_db()
        assert response.status_code == HTTPStatus.FOUND.value
        assert detail.status == PentestStatus.IN_PROGRESS
        assert_attachment_upload(detail)
        send_pentest_email.assert_called_with(detail, 'DOCUMENT_UPLOADED')


@pytest.mark.django_db
@patch('pentest.views.send_pentest_email')
def test_upload_view_ready(send_pentest_email, browser):
    detail = pentest(
        'Pentest_detail',
        PentestStatus.IN_PROGRESS,
    )
    assign_partner(detail)

    with attachment_upload(detail, browser, 'ready') as response:
        detail.refresh_from_db()
        assert response.status_code == HTTPStatus.FOUND.value
        assert detail.status == PentestStatus.READY
        assert_attachment_upload(detail)
        send_pentest_email.assert_called_with(detail, 'COMPLETED')


def assert_attachment_upload(detail: PentestRequest):
    attachment = PentestAttachment.objects.filter(pentest_request=detail).first()
    assert attachment
    assert attachment.name == FILE_NAME


def pentest(name: str, status: PentestStatus):
    org = create_organization()
    return create_pentest(name, status, dummy_owner(), org)


def dummy_owner():
    user, _ = User.objects.update_or_create(email='dummy', defaults={})
    return user


def assign_partner(pentest_request: PentestRequest):
    pentest_request.partner = Partner.objects.filter(type=PartnerType.PENTEST).first()
    pentest_request.save()

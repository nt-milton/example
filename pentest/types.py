import graphene
from graphene_django import DjangoObjectType

from laika.settings import DJANGO_SETTINGS
from pentest.calendly.rest_client import get_calendly_event_details
from pentest.models import PentestAttachment, PentestRequest
from pentest.utils import get_pentest_control
from user.types import PartnerType, UserType

PENTEST_CALENDLY_EVENT_URL = DJANGO_SETTINGS.get('PENTEST_CALENDLY_EVENT_URL')
TYPEFORM_PENTEST_FORM = DJANGO_SETTINGS.get('PENTEST_TYPEFORM_FORM')
PENTEST_READY = 'ready'


class PentestAttachmentType(DjangoObjectType):
    class Meta:
        model = PentestAttachment
        fields = ('id', 'created_at', 'is_deleted', 'third_party_id', 'name')

    id = graphene.ID()
    created_at = graphene.DateTime()
    is_deleted = graphene.Boolean()
    third_party_id = graphene.String()
    name = graphene.String()
    url = graphene.String()
    critical_vulnerabilities = graphene.String()
    high_vulnerabilities = graphene.String()

    def resolve_url(self, info):
        if self.file:
            return self.file.url
        return None


class CalendlyMeetingType(graphene.ObjectType):
    name = graphene.String()
    start_time = graphene.DateTime()
    owner_name = graphene.String()


class PentestType(DjangoObjectType):
    class Meta:
        model = PentestRequest
        fields = (
            'id',
            'status',
            'name',
            'created_by',
            'created_at',
            'updated_at',
            'target_date',
            'questionary_response',
            'meeting_id',
            'invitee_id',
            'partner',
        )

    id = graphene.ID()
    status = graphene.String()
    name = graphene.String()
    created_by = graphene.Field(UserType)
    created_at = graphene.DateTime()
    updated_at = graphene.DateTime()
    target_date = graphene.DateTime()
    questionary_response = graphene.JSONString()
    meeting_id = graphene.UUID()
    invitee_id = graphene.UUID()
    attachments = graphene.List(PentestAttachmentType)
    last_attachment = graphene.Field(PentestAttachmentType)
    meeting_data = graphene.Field(CalendlyMeetingType)
    pentest_calendly_event_url = graphene.String()
    pentest_typeform_id = graphene.String()
    pentest_control = graphene.String()
    partner = graphene.Field(PartnerType)

    def resolve_pentest_control(self, info):
        if self.status != PENTEST_READY:
            return
        organization = info.context.user.organization
        pentest_control = get_pentest_control(organization)
        if not pentest_control:
            return
        return pentest_control.id

    def resolve_attachments(self, info):
        return self.attachments.filter(is_deleted=False).order_by('-created_at')

    def resolve_last_attachment(self, info):
        return (
            PentestAttachment.objects.filter(pentest_request__id=self.id)
            .order_by('-created_at')
            .first()
        )

    def resolve_meeting_data(self, info):
        if self.meeting_id:
            result = get_calendly_event_details(self.meeting_id)
            return result or None

    def resolve_pentest_calendly_event_url(self, info):
        try:
            return self.partner.calendar
        except AttributeError:
            return PENTEST_CALENDLY_EVENT_URL

    def resolve_pentest_typeform_id(self, info):
        return TYPEFORM_PENTEST_FORM


class PentestResponseType(graphene.ObjectType):
    data = graphene.List(PentestType)

from control.models import Control
from feature.constants import new_controls_feature_flag
from laika.aws.ses import send_email
from laika.settings import DJANGO_SETTINGS, NO_REPLY_EMAIL
from pentest.constants import (
    PENTEST_EMAIL_CONTENTS,
    PENTEST_EMAIL_SUBJECTS,
    PENTEST_EMAIL_TEMPLATES,
)
from pentest.models import PentestRequest
from user.models import User

PENTEST_NAME_PLACEHOLDER = '[Pentest Name]'
LAIKA_URL = DJANGO_SETTINGS.get('LAIKA_WEB_REDIRECT')
CONTROL_REFERENCE_ID = 'CA-08-SOC'
PARTNER_ID = '60fdf70a-3771-420b-90f6-bb02f05fcdab'


def get_pentest_name_content(pentest_email_type: str, pentest_name: str) -> list[str]:
    return [
        p.replace(PENTEST_NAME_PLACEHOLDER, pentest_name)
        for p in PENTEST_EMAIL_CONTENTS[pentest_email_type]
    ]


def get_pentest_name_subject(pentest_email_type, pentest_name):
    return PENTEST_EMAIL_SUBJECTS[pentest_email_type].replace(
        PENTEST_NAME_PLACEHOLDER, pentest_name
    )


def send_pentest_email(pentest: PentestRequest, pentest_email_type: str):
    email_context = build_pentest_email_context(
        pentest=pentest,
        subject=get_pentest_name_subject(pentest_email_type, pentest.name),
        pentest_email_type=pentest_email_type,
    )
    user = User.objects.get(pk=pentest.created_by_id)
    send_email(
        subject=email_context.get('subject'),
        from_email=NO_REPLY_EMAIL,
        to=[user.email],
        template=PENTEST_EMAIL_TEMPLATES['DYNAMIC_TEMPLATE'],
        template_context=email_context.get('template_context'),
    )


def build_pentest_email_context(
    pentest: PentestRequest, subject: str, pentest_email_type: str
) -> dict:
    return {
        'subject': subject,
        'template_context': {
            'subject': subject,
            'pentest_url': f"{LAIKA_URL}/pentest/{pentest.id}",
            'pentest_name': pentest.name,
            'reconfigure_profile_url': f"{LAIKA_URL}/profile",
            'content': get_pentest_name_content(pentest_email_type, pentest.name),
            'email_type': pentest_email_type,
        },
    }


def get_pentest_control(organization):
    if not organization.is_flag_active(new_controls_feature_flag):
        return
    pentest_control = Control.objects.filter(
        reference_id=CONTROL_REFERENCE_ID, organization_id=organization.id
    ).first()
    return pentest_control


def pentest_partner_migration(partner_type, pentest_type):
    partner_type.objects.create(
        id=PARTNER_ID,
        name='WhiteJaguars',
        type='pentest',
        calendar='https://calendly.com/laika-dev/pentest-partner-meeting-test',
    )
    pentest_type.objects.all().update(partner=PARTNER_ID)

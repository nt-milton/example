from os.path import basename, splitext

from django.core.files import File
from django.http import HttpRequest
from django.shortcuts import redirect, render
from django.views.decorators.http import require_GET, require_POST

from pentest.constants import EmailType
from pentest.models import PentestAttachment, PentestRequest
from pentest.utils import send_pentest_email
from user.partner.auth import pentest_partner_login


@require_GET
@pentest_partner_login
def index_view(request: HttpRequest):
    pentest_list = PentestRequest.objects.filter(
        partner__in=request.user.partners.all()
    ).order_by('-created_at')
    context = {
        'pentest_list': pentest_list,
    }
    return render(request, 'partner_list.html', context)


@require_GET
@pentest_partner_login
def detail_view(request, **kwargs):
    pentest = PentestRequest.objects.get(
        id=kwargs.get('pentest_id'), partner__in=request.user.partners.all()
    )
    actions = {
        PentestRequest.Status.BOOKED: 'start',
        PentestRequest.Status.IN_PROGRESS: 'attach',
    }
    context = {
        'pentest': pentest,
        'attachments': pentest.attachments.all().order_by('-created_at'),
        'action': actions.get(pentest.status),
    }
    return render(request, 'pentest_detail.html', context)


@require_POST
@pentest_partner_login
def start_view(request, **kwargs):
    pentest = PentestRequest.objects.get(
        id=kwargs.get('pentest_id'), partner__in=request.user.partners.all()
    )
    pentest.status = PentestRequest.Status.IN_PROGRESS
    send_pentest_email(pentest, EmailType.IN_PROGRESS.value)
    pentest.save()

    return redirect(f'/pentest/{pentest.id}')


@require_POST
@pentest_partner_login
def upload_view(request: HttpRequest, **kwargs):
    pentest = PentestRequest.objects.get(
        id=kwargs.get('pentest_id'), partner__in=request.user.partners.all()
    )
    if 'attachment' in request.FILES:
        save_attachment(request, pentest)
        if request.POST['status'] == PentestRequest.Status.READY:
            pentest.status = PentestRequest.Status.READY
            pentest.save()
            send_pentest_email(pentest, EmailType.COMPLETED.value)
        else:
            send_pentest_email(pentest, EmailType.DOCUMENT_UPLOADED.value)
    return redirect(f'/pentest/{pentest.id}')


def save_attachment(request: HttpRequest, pentest: PentestRequest) -> None:
    attachment = request.FILES['attachment']
    attachment_name = _truncate_name(attachment.name)
    PentestAttachment.objects.create(
        third_party_id='n/a',
        name=attachment_name,
        pentest_request=pentest,
        file=File(attachment, name=attachment_name),
        executive_summary=request.POST.get('executive_summary', 0),
        critical_vulnerabilities=request.POST.get('critical', 0),
        high_vulnerabilities=request.POST.get('high', 0),
        medium_vulnerabilities=request.POST.get('medium', 0),
        low_vulnerabilities=request.POST.get('low', 0),
        info_vulnerabilities=request.POST.get('info', 0),
    )


def _truncate_name(attachment_name: str) -> str:
    file_name, file_extension = splitext(basename(attachment_name))
    file_name = file_name[: (32 - len(file_extension))]
    return file_name + file_extension

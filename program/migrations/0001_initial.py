# Generated by Django 3.0.3 on 2020-03-27 18:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import laika.storage
import program.models


class Migration(migrations.Migration):
    initial = True

    PROGRAM_SUBTASK = 'program.SubTask'
    VENDOR_CERTIFICATION = 'vendor.Certification'

    dependencies = [
        ('vendor', '0008_vendor_categories_to_many_to_many'),
        ('tag', '0001_initial_tag_model'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('evidence', '0001_initial'),
        ('organization', '0005_auto_20200304_1700'),
        ('control', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Program',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.CharField(max_length=512)),
                (
                    'sort_index',
                    models.IntegerField(blank=True, default=9999999, null=True),
                ),
                ('documentation_link', models.CharField(blank=True, max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='SubTask',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('text', models.TextField()),
                (
                    'group',
                    models.CharField(
                        choices=[
                            ('documentation', 'Documentation'),
                            ('policy', 'Policy'),
                            ('implementation', 'Implementation'),
                        ],
                        default=None,
                        max_length=264,
                    ),
                ),
                ('requires_evidence', models.BooleanField(default=False)),
                (
                    'sort_index',
                    models.IntegerField(blank=True, default=9999999, null=True),
                ),
                ('completed', models.BooleanField(default=False)),
                (
                    'assignee',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('display_id', models.IntegerField(default=1)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True)),
                (
                    'category',
                    models.CharField(
                        choices=[
                            ('Asset Management', 'Asset Management'),
                            (
                                'Business Continuity & Disaster Recovery',
                                'Business Continuity & Disaster Recovery',
                            ),
                            (
                                'Capacity & Performance Planning',
                                'Capacity & Performance Planning',
                            ),
                            ('Change Management', 'Change Management'),
                            ('Cloud Security', 'Cloud Security'),
                            ('Compliance', 'Compliance'),
                            ('Configuration Management', 'Configuration Management'),
                            ('Cryptographic Protections', 'Cryptographic Protections'),
                            (
                                'Data Classification & Handling',
                                'Data Classification & Handling',
                            ),
                            ('Embedded Technology', 'Embedded Technology'),
                            ('Endpoint Security', 'Endpoint Security'),
                            ('Human Resources Security', 'Human Resources Security'),
                            (
                                'Identification & Authentication',
                                'Identification & Authentication',
                            ),
                            ('Incident Response', 'Incident Response'),
                            ('Information Assurance', 'Information Assurance'),
                            ('Maintenance', 'Maintenance'),
                            ('Mobile Device Management', 'Mobile Device Management'),
                            ('Monitoring', 'Monitoring'),
                            ('Network Security', 'Network Security'),
                            (
                                'Physical & Environmental Security',
                                'Physical & Environmental Security',
                            ),
                            ('Privacy', 'Privacy'),
                            (
                                'Project & Resource Management',
                                'Project & Resource Management',
                            ),
                            ('Risk Management', 'Risk Management'),
                            (
                                'Secure Engineering & Architecture',
                                'Secure Engineering & Architecture',
                            ),
                            (
                                'Security & Privacy Governance',
                                'Security & Privacy Governance',
                            ),
                            (
                                'Security Awareness & Training',
                                'Security Awareness & Training',
                            ),
                            ('Security Operations', 'Security Operations'),
                            (
                                'Technology Development & Acquisition',
                                'Technology Development & Acquisition',
                            ),
                            ('Third-Party Management', 'Third-Party Management'),
                            ('Threat Management', 'Threat Management'),
                            (
                                'Vulnerability & Patch Management',
                                'Vulnerability & Patch Management',
                            ),
                            ('Web Security', 'Web Security'),
                            ('Other', 'Other'),
                        ],
                        default='Other',
                        max_length=264,
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('todo', 'To Do'),
                            ('in_progress', 'In Progress'),
                            ('completed', 'Completed'),
                        ],
                        default='todo',
                        max_length=264,
                    ),
                ),
                (
                    'priority',
                    models.CharField(
                        choices=[
                            ('required', 'Required'),
                            ('key', 'Key'),
                            ('recommeded', 'Recommended'),
                        ],
                        default='required',
                        max_length=264,
                    ),
                ),
                (
                    'howto_guide',
                    models.FileField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        storage=laika.storage.PrivateMediaStorage(),
                        upload_to=program.models.howto_guide_upload_directory,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='TaskControl',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'control',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='control.Control',
                    ),
                ),
                (
                    'task',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='program.Task'
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'controls',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='controls',
            field=models.ManyToManyField(
                related_name='tasks',
                through='program.TaskControl',
                to='control.Control',
            ),
        ),
        migrations.AddField(
            model_name='task',
            name='owner',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='task',
            name='program',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='tasks',
                to='program.Program',
            ),
        ),
        migrations.CreateModel(
            name='SubtaskTag',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'subtask',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=PROGRAM_SUBTASK,
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='tag.Tag'
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'tags',
            },
        ),
        migrations.CreateModel(
            name='SubtaskEvidence',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'evidence',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='evidence.Evidence',
                    ),
                ),
                (
                    'subtask',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=PROGRAM_SUBTASK,
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'evidence',
            },
        ),
        migrations.CreateModel(
            name='SubtaskCertification',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'certification',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=VENDOR_CERTIFICATION,
                    ),
                ),
                (
                    'subtask',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=PROGRAM_SUBTASK,
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'certifications',
            },
        ),
        migrations.AddField(
            model_name='subtask',
            name='certifications',
            field=models.ManyToManyField(
                related_name='subtasks',
                through='program.SubtaskCertification',
                to=VENDOR_CERTIFICATION,
            ),
        ),
        migrations.AddField(
            model_name='subtask',
            name='evidence',
            field=models.ManyToManyField(
                related_name='subtasks',
                through='program.SubtaskEvidence',
                to='evidence.Evidence',
            ),
        ),
        migrations.AddField(
            model_name='subtask',
            name='tags',
            field=models.ManyToManyField(
                related_name='subtasks', through='program.SubtaskTag', to='tag.Tag'
            ),
        ),
        migrations.AddField(
            model_name='subtask',
            name='task',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='subtasks',
                to='program.Task',
            ),
        ),
        migrations.CreateModel(
            name='ProgramCertification',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('is_locked', models.BooleanField(default=False)),
                (
                    'certification',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=VENDOR_CERTIFICATION,
                    ),
                ),
                (
                    'program',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='program.Program',
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'certifications',
            },
        ),
        migrations.AddField(
            model_name='program',
            name='certifications',
            field=models.ManyToManyField(
                related_name='programs',
                through='program.ProgramCertification',
                to=VENDOR_CERTIFICATION,
            ),
        ),
        migrations.AddField(
            model_name='program',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='programs',
                to='organization.Organization',
            ),
        ),
    ]

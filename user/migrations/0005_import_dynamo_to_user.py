# Generated by Django 3.0.2 on 2020-02-22 20:12

import os
from datetime import datetime

import boto3
from django.db import migrations

from laika.utils.dates import YYYY_MM_DD_HH_MM_SS, dynamo_timestamp_to_datetime
from laika.utils.strings import camel_to_snake

ENVIRONMENT = os.getenv('ENVIRONMENT')
LEGACY_AWS_ACCESS_KEY = os.getenv('LEGACY_AWS_ACCESS_KEY')
LEGACY_AWS_SECRET_ACCESS_KEY = os.getenv('LEGACY_AWS_SECRET_ACCESS_KEY')


def migrate_users(apps, schema_editor):
    Organization = apps.get_model('organization', 'Organization')
    User = apps.get_model('user', 'User')

    env = ENVIRONMENT

    if ENVIRONMENT == 'prod':
        env = 'production'
    elif ENVIRONMENT == 'local':
        # In case we are in local we would need to get it from dev
        env = 'dev'

    client = boto3.client(
        'dynamodb',
        region_name='us-east-1',
        aws_access_key_id=LEGACY_AWS_ACCESS_KEY,
        aws_secret_access_key=LEGACY_AWS_SECRET_ACCESS_KEY,
    )

    tables_response = client.list_tables()
    table_names = tables_response.get('TableNames')
    name = [t for t in table_names if f'{env}-UserTable' in t]
    users = []

    if name:
        user_response = client.scan(TableName=name[0])
        users = user_response.get('Items')

    user = {}
    for u in users:
        for key in u:
            value = list(u[key].values())[0]
            pgKey = camel_to_snake(key)

            if (
                key == 'createdAt'
                or key == 'updatedAt'
                or key == 'lastActivityDate'
                and value != '0'
            ):
                date_time = dynamo_timestamp_to_datetime(int(value))
                value = datetime.strftime(date_time, YYYY_MM_DD_HH_MM_SS)

            if key == 'lastActivityDate':
                pgKey = 'last_login'

            if key == 'id':
                id = value
            else:
                if (
                    pgKey != 'organization_name'
                    and pgKey != 'organization_tier'
                    and pgKey != 'status'
                ):
                    user[pgKey] = value

        organization_exists = Organization.objects.filter(
            id=user.get('organization_id')
        ).exists()
        if organization_exists:
            User.objects.update_or_create(username=id, defaults=user)

        user = {}


class Migration(migrations.Migration):
    dependencies = [
        ('user', '0003_auto_20200222_1945'),
        ('organization', '0004_import_dynamo_to_organizations'),
    ]

    operations = [migrations.RunPython(migrate_users)]

# Generated by Django 3.0.2 on 2020-03-09 19:27

import logging

from django.db import migrations

logger = logging.getLogger('user_permissions_migration')

group_names = [
    'teaser_member',
    'teaser_admin',
    'teaser_super',
    'starter_member',
    'starter_admin',
    'starter_super',
    'premium_member',
    'premium_admin',
    'premium_super',
]


def add_organization_permissions_to_groups(apps, groups):
    Permission = apps.get_model('auth', 'Permission')
    can_edit_org = Permission.objects.get(codename='change_organization')
    can_view_org = Permission.objects.get(codename='view_organization')

    for g in groups:
        g.permissions.add(can_view_org)

        if 'super' in g.name or g.name == 'starter_admin' or g.name == 'premium_admin':
            g.permissions.add(can_edit_org)


def add_policy_permissions_to_groups(apps, groups):
    Permission = apps.get_model('auth', 'Permission')
    can_view_policy = Permission.objects.get(codename='view_policy')
    can_add_policy = Permission.objects.get(codename='add_policy')
    can_edit_policy = Permission.objects.get(codename='change_policy')
    can_delete_policy = Permission.objects.get(codename='delete_policy')
    can_publish_policy = Permission.objects.get(codename='publish_policy')
    can_unpublish_policy = Permission.objects.get(codename='unpublish_policy')
    can_batch_delete_policy = Permission.objects.get(codename='batch_delete_policy')

    for g in groups:
        g.permissions.add(can_view_policy)

        if (
            'super' in g.name
            or g.name == 'starter_admin'
            or g.name == 'premium_admin'
            or g.name == 'starter_member'
            or g.name == 'premium_member'
        ):
            g.permissions.add(
                can_add_policy,
                can_delete_policy,
                can_edit_policy,
                can_publish_policy,
                can_unpublish_policy,
            )

        if 'super' in g.name or g.name == 'starter_admin' or g.name == 'premium_admin':
            g.permissions.add(
                can_batch_delete_policy,
            )


def add_users_permissions_to_groups(apps, groups):
    Permission = apps.get_model('auth', 'Permission')
    can_edit_user = Permission.objects.get(codename='change_user')
    can_delete_user = Permission.objects.get(codename='delete_user')
    can_add_user = Permission.objects.get(codename='add_user')
    can_view_user = Permission.objects.get(codename='view_user')

    for g in groups:
        g.permissions.add(can_view_user)

        if 'super' in g.name or g.name == 'starter_admin' or g.name == 'premium_admin':
            g.permissions.add(can_edit_user, can_delete_user, can_add_user)

        if g.name == 'starter_member' or g.name == 'premium_member':
            g.permissions.add(can_add_user)


def add_permissions(apps, schema_editor):
    User = apps.get_model('user', 'User')
    Policy = apps.get_model('policy', 'Policy')
    Group = apps.get_model('auth', 'Group')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Permission = apps.get_model('auth', 'Permission')

    users = User.objects.all()
    # Create groups for permissions
    for gn in group_names:
        Group.objects.create(name=gn)

    content_type = ContentType.objects.get_for_model(Policy)

    # Create missing policy permissions
    Permission.objects.create(
        codename='batch_delete_policy',
        name='Can batch delete policies',
        content_type=content_type,
    )
    Permission.objects.create(
        codename='publish_policy',
        name='Can publish policy',
        content_type=content_type,
    )
    Permission.objects.create(
        codename='unpublish_policy',
        name='Can unpublish policy',
        content_type=content_type,
    )

    # Add permissions to groups
    groups = Group.objects.all()
    add_users_permissions_to_groups(apps, groups)
    add_organization_permissions_to_groups(apps, groups)
    add_policy_permissions_to_groups(apps, groups)

    # Add users to groups
    for u in users:
        has_empty_role = u.role is None or not u.role.strip() or u.role.strip() == "''"
        tier = u.organization and u.organization.tier
        has_empty_tier = tier is None or not tier.strip() or tier.strip() == "''"
        if has_empty_role or has_empty_tier:
            logger.warn(f'Skipping adding permission to user: {u.id}')
        else:
            tier = u.organization and u.organization.tier
            if u.role is None:
                raise ValueError

            if u.role.lower() == 'superadmin':
                role_type = 'super'
            else:
                role_type = u.role.split('Organization')[1].lower()

            group_name = f'{tier.lower()}_{role_type}' or ''
            group = Group.objects.get(name=group_name)
            u.groups.add(group)


def create_all_permissions(apps, schema_editor):
    from django.contrib.auth.management import create_permissions

    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, verbosity=0, apps=apps)
        app_config.models_module = None


class Migration(migrations.Migration):
    dependencies = [
        ('user', '0005_import_dynamo_to_user'),
        ('policy', '0012_add_onboarding_policies'),
    ]

    operations = [
        migrations.RunPython(create_all_permissions),
        migrations.RunPython(add_permissions),
    ]

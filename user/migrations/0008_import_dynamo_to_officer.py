# Generated by Django 3.0.3 on 2020-03-23 21:34

import logging
import os
from datetime import datetime

import boto3
from django.db import migrations

from laika.utils.dates import YYYY_MM_DD, dynamo_timestamp_to_datetime
from laika.utils.strings import camel_to_snake

logger = logging.getLogger('officer_migration')

ENVIRONMENT = os.getenv('ENVIRONMENT')
LEGACY_AWS_ACCESS_KEY = os.getenv('LEGACY_AWS_ACCESS_KEY')
LEGACY_AWS_SECRET_ACCESS_KEY = os.getenv('LEGACY_AWS_SECRET_ACCESS_KEY')


def migrate_officers(apps, schema_editor):
    User = apps.get_model('user', 'User')
    Organization = apps.get_model('organization', 'Organization')
    Officer = apps.get_model('user', 'Officer')

    env = ENVIRONMENT

    if ENVIRONMENT == 'prod':
        env = 'production'
    elif ENVIRONMENT == 'local':
        # In case we are in local we would need to get it from dev
        env = 'dev'

    client = boto3.client(
        'dynamodb',
        region_name='us-east-1',
        aws_access_key_id=LEGACY_AWS_ACCESS_KEY,
        aws_secret_access_key=LEGACY_AWS_SECRET_ACCESS_KEY,
    )

    tables_response = client.list_tables()
    table_names = tables_response.get('TableNames')
    name = [t for t in table_names if f'{env}-OfficerTable' in t]
    officers = []

    if name:
        officer_response = client.scan(TableName=name[0])
        officers = officer_response.get('Items')

    officer = {}
    for o in officers:
        for key in o:
            value = list(o[key].values())[0]
            pgKey = camel_to_snake(key)

            if key == 'createdAt' or key == 'updatedAt':
                date_time = dynamo_timestamp_to_datetime(int(value))
                value = datetime.strftime(date_time, YYYY_MM_DD)

            if key == 'id':
                id = value
            else:
                officer[pgKey] = value

        if officer.get('user') is not None:
            related_user = User.objects.filter(
                email=officer.get('user'),
                organization_id=officer.get('organization_id'),
            ).first()

            officer['user'] = related_user

        organization_exists = Organization.objects.filter(
            id=officer.get('organization_id')
        ).exists()

        if organization_exists:
            Officer.objects.update_or_create(id=id, defaults=officer)
        else:
            logger.warn(f'Skipping adding officer: {o.get("id")}')

        officer = {}


class Migration(migrations.Migration):
    dependencies = [
        ('user', '0007_officer'),
    ]

    operations = [migrations.RunPython(migrate_officers)]

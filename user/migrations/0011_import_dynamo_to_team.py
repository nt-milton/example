# Generated by Django 3.0.3 on 2020-04-02 17:49

import logging
import os
from datetime import datetime

import boto3
from django.db import migrations

from laika.utils.dates import YYYY_MM_DD, dynamo_timestamp_to_datetime
from laika.utils.dictionaries import exclude_dict_keys
from laika.utils.strings import camel_to_snake

logger = logging.getLogger('officer_migration')

ENVIRONMENT = os.getenv('ENVIRONMENT')
LEGACY_AWS_ACCESS_KEY = os.getenv('LEGACY_AWS_ACCESS_KEY')
LEGACY_AWS_SECRET_ACCESS_KEY = os.getenv('LEGACY_AWS_SECRET_ACCESS_KEY')


def store_team_members(apps, members, team):
    User = apps.get_model('user', 'User')
    TeamMember = apps.get_model('user', 'TeamMember')

    if members and len(members) > 0:
        for team_member in members:
            related_user = User.objects.filter(
                email=team_member.get('user'), organization_id=team.organization_id
            ).first()

            if related_user:
                team_member['user'] = related_user
                team_member['team'] = team

                TeamMember.objects.update_or_create(
                    id=team_member.get('id'),
                    defaults=exclude_dict_keys(team_member, ['id']),
                )
            else:
                logger.warn(f'Skipping adding team member: {team_member.get("user")}')


def migrate_teams(apps, schema_editor):
    Organization = apps.get_model('organization', 'Organization')
    Team = apps.get_model('user', 'Team')

    env = ENVIRONMENT

    if ENVIRONMENT == 'prod':
        env = 'production'
    elif ENVIRONMENT == 'local':
        # In case we are in local we would need to get it from dev
        env = 'dev'

    client = boto3.client(
        'dynamodb',
        region_name='us-east-1',
        aws_access_key_id=LEGACY_AWS_ACCESS_KEY,
        aws_secret_access_key=LEGACY_AWS_SECRET_ACCESS_KEY,
    )

    tables_response = client.list_tables()
    table_names = tables_response.get('TableNames')
    name = [t for t in table_names if f'{env}-TeamTable' in t]
    teams = []

    if name:
        team_response = client.scan(TableName=name[0])
        teams = team_response.get('Items', [])

    team = {}
    members = []
    for t in teams:
        for key in t:
            value = list(t[key].values())[0]
            pgKey = camel_to_snake(key)

            if key == 'createdAt' or key == 'updatedAt':
                date_time = dynamo_timestamp_to_datetime(int(value))
                value = datetime.strftime(date_time, YYYY_MM_DD)

            if key == 'members' and value and len(value) > 0:
                for m in value:
                    parsed_member_obj = list(m.values())[0]
                    member = {
                        camel_to_snake(key): list(val.values())[0]
                        for (key, val) in parsed_member_obj.items()
                    }

                    members.append(member)

            if key == 'id':
                id = value
            else:
                if pgKey != 'members':
                    team[pgKey] = value

        organization_exists = Organization.objects.filter(
            id=team.get('organization_id')
        ).exists()

        if organization_exists:
            created_team, _ = Team.objects.update_or_create(id=id, defaults=team)

            store_team_members(apps, members, created_team)
            members = []
        else:
            logger.warn(f'Skipping adding team: {t.get("id")}')

        team = {}


class Migration(migrations.Migration):
    dependencies = [
        ('user', '0010_create_team_and_members_tables'),
    ]

    operations = [migrations.RunPython(migrate_teams)]

# Generated by Django 3.0.2 on 2020-02-19 03:42
import io
import json
import logging
import os

import requests
from django.core.files import File
from django.db import migrations

__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))

logger = logging.getLogger('vendor')


def get_s3_path(vendor_name):
    return f'vendors/{vendor_name}/{vendor_name.replace(" ", "_")}.png'


def create_certifications(apps):
    Certification = apps.get_model('vendor', 'Certification')
    certifications = []
    protocols = json.load(
        open(os.path.join(__location__, 'default_vendors/protocols.json'))
    )
    for protocol in protocols:
        name = protocol['name']
        code = protocol['slug']
        logo = open(
            os.path.join(
                __location__, f'default_vendors/certification_logos/{code}.png'
            ),
            'rb',
        )
        certification, created = Certification.objects.get_or_create(
            id=protocol['id'],
            defaults={
                'name': name,
                'code': code,
                'description': protocol['description'] or '',
                'regex': protocol['regex'],
                'logo': File(logo, name=f'{code}.png'),
            },
        )
        certifications.append(certification)
    return certifications


def create_vendor_certifications(
    apps, vendor, certifications, certifications_to_import
):
    Certification = apps.get_model('vendor', 'Certification')
    CertificationVendor = apps.get_model('vendor', 'CertificationVendor')

    for certification_to_import in certifications_to_import:
        CertificationVendor.objects.create(
            vendor=vendor,
            certification=Certification.objects.get(
                pk=certification_to_import['protocolId']
            ),
            url=certification_to_import['sourceUrl'],
        )


def create_vendors(apps, certifications):
    Vendor = apps.get_model('vendor', 'Vendor')

    files_to_import = [
        'advertising.json',
        'analytics.json',
        'big_data.json',
        'cloud_computing.json',
        'crm.json',
        'e_comerce.json',
        'enterprise_software.json',
        'information_technology.json',
        'internet.json',
        'marketing.json',
        'marketing_automation.json',
        'mobile.json',
        'saas.json',
        'software.json',
    ]
    for file_to_import in files_to_import:
        file = open(os.path.join(__location__, f'default_vendors/{file_to_import}'))
        category = json.load(file)
        for vendor_to_import in category['vendors']:
            vendor_exists = Vendor.objects.filter(
                name=vendor_to_import['name']
            ).exists()
            if not vendor_exists:
                name = vendor_to_import['name']
                logo = get_s3_path(name) if vendor_to_import['logo'] else ''
                vendor = Vendor.objects.create(
                    name=name,
                    logo=logo,
                    website=vendor_to_import['website'],
                    description=vendor_to_import['description'],
                    is_public=True,
                )
                create_vendor_certifications(
                    apps, vendor, certifications, vendor_to_import['vendorToProtocols']
                )


def migrate(apps, schema_editor):
    create_vendors(apps, create_certifications(apps))


class Migration(migrations.Migration):
    dependencies = [
        ('vendor', '0001_initial'),
    ]

    operations = [migrations.RunPython(migrate)]
